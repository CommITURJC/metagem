
Transformación Class2Table (RubyTL)
****************************************************

· Partimos del modelo MeTAGeM (transformations/class2table.amw) en el que se define
la transformación a nivel PIM.

· Mediante el menú contextual del modelo MeTAGeM generamos el modelo Hybrid (Run as, 
MeTAGeM -> Hybrid) en el que se define la transformación a nivel PSM. El asistente nos
solicita dos modelos de tipo MOF: left (origen) y right (destino). En este caso, el
modelo left corresponde al metamodelo ClassM (metamodels/ClassM.ecore) y el modelo right
al metamodelo TableM (metamodels/TableM.ecore).

· El modelo a nivel PSM (transformations/class2table.mm_hybrid) permite añadir 
nuevas caracteristicas a la transformación, en este caso añadimos una guarda al elemento
 de entrada de la regla 'Attribute_2_FKey': attribute_in.type.kind_of? Class_model::Class
   
· Además, en el elemento de entrada 'type' correspondiente a uno de los RightPattern de
los elementos incluidos en la regla de transformación 'Attribute_2_Column', modificamos
el valor del atributo 'Name element' que pasará de 'type' a 'type.name' con el objetivo
de navegar por la referencia y obtener el nombre del tipo.

· En la regla 'Attribute_2_FKey',para el último de los elementos incluidos en el destino
no se ha definido el origen de la transformación, por ello se producirá un error de 
validación. Para solucionarlo y generar correctamente la transformacion class2table
añadimos al atributo 'Concrete Value' del 'Right Pattern' la siguiente información:
 attribute_in.type.attrs.select { |a| a.is_primary }

· A continuación generamos el modelo de RubyTL(transformation/class2table.rubytl) que 
contiene la transformación a nivel PDM. Para ello, empleamos el menú contextual del 
modelo Hybrid (Run as, Hybrid -> RubyTL)

· A partir del modelo RubyTL, podemos obtener el código ejecutable de la transformación
(transformation/class2table.rb). Para ello, sobre el menú contextual del modelo de RubyTL
lanzaremos el proceso de extracción de código ('Extract RubyTL model to RubyTL file (MeTAGeM)').
El código obtenido no es 100% ejecutable, por ello, es necesario realizar los siguientes 
cambios:

	+ En los filter es necesario eliminar las dobles comillas (") que aparecen en la guarda
	+ En el binding column_out.type  =  attribute_in."type.name" de la regla 'Attribute_2_Column'
	  se deben eliminar las comillas dobles que aparecen en attribute_in."type.name"
	+ En el binding fkey_out.cols  =  "attribute_in.type.attrs.select { |a| a.is_primary }" de la regla
	  'Attribute_2_FKey' es necesario eliminar las comillas de "attribute_in.type.attrs.select { |a| a.is_primary }"

· Finalmente, debemos crear un fichero rake que nos permita ejecutar la transformación 
de RubyTL (class2table.rake)