
Transformación Families2Persons (ATL)
****************************************************

· Partimos del modelo MeTAGeM (transformations/families2persons.amw) en el que se define
la transformación a nivel PIM.

· Mediante el menú contextual del modelo MeTAGeM generamos el modelo Hybrid (Run as, 
MeTAGeM -> Hybrid) en el que se define la transformación a nivel PSM. El asistente nos
solicita dos modelos de tipo MOF: left (origen) y right (destino). En este caso, el
modelo left corresponde al metamodelo Families(metamodels/Families.ecore) y el modelo right
al metamodelo Persons(metamodels/Persons.ecore).

· El modelo a nivel PSM (transformations/families2persons.mm_hybrid) permite añadir 
nuevas caracteristicas a la transformación, en este caso añadimos:
	+ Una operación ('getFatherName()') con la siguiente información:
		- Body: self.firstName + ' ' + self.familyFather.lastName
		- Context: Source Father::families_model
		- Name: getFatherName()
		- Return: Datatype String
	+ En el 'RightPattern' del 'ElementIncluded' correspondiente al destino de 
	  la regla 'father2male' añadimos la operación recien creada, getFatherName().
	+ En el resto de reglas: En el 'RightPattern' del elemento incluido encontramos
	  dos elementos de entrada. En el elemento 'family(Mother/Son/Daughter)' debemos
	  añadir '.lastName' al atributo nameElement quedando del siguiente modo: familyMother.lastName,
	  familySon.lastName y familyDaughter.lastName, respectivamente

· A continuación generamos el modelo de ATL(transformation/families2persons-atl.ecore) que 
contiene la transformación a nivel PDM. Para ello, empleamos el menú contextual del 
modelo Hybrid (Run as, Hybrid -> ATL)

· A partir del modelo ATL, podemos obtener el código ejecutable de la transformación
(transformation/families2persons-atl.atl). Para ello, sobre el menú contextual del modelo de ATL
(estando en la perspectiva de AM3) lanzaremos el proceso de extracción de código 
('Extract ATL-0.2 model to ATL-0.2 file').

El código obtenido no es 100% ejecutable, por ello, es necesario realizar los siguientes 
cambios:

	+ En cada una de las reglas, en la generación de los atributos de la clase es necesario
	  eliminar las dobles comillas que aparecen en el origen. Por ejemplo:
	     father_in."getFatherName()"     =>  father_in.getFatherName()	
	     mother_in.firstName + mother_in."familyMother.lastName"   =>   mother_in.firstName + mother_in.familyMother.lastName
	+ El helper generado es el siguiente:
	
		helper context families!Father def: "getFatherName()"() : String =
  		; -- Body: self.firstName + ' ' + self.familyFather.lastName
  		
  	  es necesario convertirlo en:
  	  	helper context families!Father def: getFatherName() : String =
  			self.firstName + ' ' + self.familyFather.lastName
  		;

· Finalmente, podremos ejecutar la transformación ATL (Families2Persons_ATL.launch) que nos generará el modelo de
de salida (models/sample-Persons.xmi)

· Como se puede apreciar en el modelo de salida, los nombres de los padres aparecen separados ('Homer Simpson')
mientras que el nombre del resto de la familia aparece unido ('MargeSimpson'). Esto es debido a que el helper que
genera el nombre de los padres contiene un espacio entre los atributos firstName y familyFather.name . Para que el 
nombre de todos los miembros de la familia aparezcan por separado bastará con incluir un espacio entre estos atributos 
en sus correspondientes reglas. Por ejemplo:

-- Comments -> This is a MatchedRule: daughter2female -> 
rule daughter2female {
  from
    daughter_in : families!Daughter
  to
    female_out : persons!Female (
      fullName <- daughter_in.firstName + ' ' + daughter_in.familyDaughter.lastName
    )
}