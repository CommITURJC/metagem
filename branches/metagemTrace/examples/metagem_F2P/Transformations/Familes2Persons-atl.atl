-- @atlcompiler atl2006
module familes2persons;
create Persons_model : Persons, in2out_trace : TRACE from Families_model : Families;

-- Comments -> This is a MatchedRule: Father_2_Male -> 
rule Father_2_Male {
 from
  father_in : Families!Father
 to
  male_out : Persons!Male (
   fullName <- father_in.getFatherName()
  ),
  Father_2_Male : TRACE!TraceLink (
   name <- 'Father_2_Male',
   traceModel <- thisModule.getTraceModelRoot,
   operation <- #Transform,
   source <- Sequence {father_in_Trace},
   target <- Sequence {male_out_Trace},
   childLinks <- Sequence {R8}
  ),
  R8 : TRACE!TraceLink (
   name <- 'R8',
   operation <- #Create,
   source <- Sequence {},
   target <- Sequence {fullname_out_Trace}
  ),
  father_in_Trace : TRACE!SourceElement (
   name <- father_in.getName(),
   ref <- father_in.__xmiID__,
   elementModel <- thisModule.create_Father_component(father_in)
  ),
  male_out_Trace : TRACE!TargetElement (
   name <- male_out.getName(),
   ref <- male_out.__xmiID__,
   elementModel <- thisModule.create_Male_component(male_out)
  ),
  fullname_out_Trace : TRACE!TargetElement (
   name <- male_out.fullName
  )
 -- ActionBlock: 
 do {
  
 }
}

-- Comments -> This is a MatchedRule: Mother_2_Female -> 
rule Mother_2_Female {
 from
  mother_in : Families!Mother
 to
  female_out : Persons!Female (
   fullName <- mother_in.firstName
  ),
  Mother_2_Female : TRACE!TraceLink (
   name <- 'Mother_2_Female',
   traceModel <- thisModule.getTraceModelRoot,
   operation <- #Transform,
   source <- Sequence {mother_in_Trace},
   target <- Sequence {female_out_Trace},
   childLinks <- Sequence {firstName_2_fullName}
  ),
  firstName_2_fullName : TRACE!TraceLink (
   name <- 'firstName_2_fullName',
   operation <- #Transform,
   source <- Sequence {firstname_in_Trace, "familymother.lastname_in_Trace"},
   target <- Sequence {fullname_out_Trace}
  ),
  mother_in_Trace : TRACE!SourceElement (
   name <- mother_in.getName(),
   ref <- mother_in.__xmiID__,
   elementModel <- thisModule.create_Mother_component(mother_in)
  ),
  firstname_in_Trace : TRACE!SourceElement (
   name <- mother_in.firstName
  ),
  "familymother.lastname_in_Trace" : TRACE!SourceElement (
   name <- mother_in.familyMother.lastName
  ),
  female_out_Trace : TRACE!TargetElement (
   name <- female_out.getName(),
   ref <- female_out.__xmiID__,
   elementModel <- thisModule.create_Female_component(female_out)
  ),
  fullname_out_Trace : TRACE!TargetElement (
   name <- female_out.fullName
  )
 -- ActionBlock: 
 do {
  
 }
}

-- Comments -> This is a MatchedRule: Son_2_Male -> 
rule Son_2_Male {
 from
  son_in : Families!Son
 to
  male_out : Persons!Male (
   fullName <- son_in.firstName
  ),
  Son_2_Male : TRACE!TraceLink (
   name <- 'Son_2_Male',
   traceModel <- thisModule.getTraceModelRoot,
   operation <- #Transform,
   source <- Sequence {son_in_Trace},
   target <- Sequence {male_out_Trace},
   childLinks <- Sequence {firstName_2_fullName}
  ),
  firstName_2_fullName : TRACE!TraceLink (
   name <- 'firstName_2_fullName',
   operation <- #Transform,
   source <- Sequence {firstname_in_Trace, "familyson.lastname_in_Trace"},
   target <- Sequence {fullname_out_Trace}
  ),
  son_in_Trace : TRACE!SourceElement (
   name <- son_in.getName(),
   ref <- son_in.__xmiID__,
   elementModel <- thisModule.create_Son_component(son_in)
  ),
  firstname_in_Trace : TRACE!SourceElement (
   name <- son_in.firstName
  ),
  "familyson.lastname_in_Trace" : TRACE!SourceElement (
   name <- son_in.familySon.lastName
  ),
  male_out_Trace : TRACE!TargetElement (
   name <- male_out.getName(),
   ref <- male_out.__xmiID__,
   elementModel <- thisModule.create_Male_component(male_out)
  ),
  fullname_out_Trace : TRACE!TargetElement (
   name <- male_out.fullName
  )
 -- ActionBlock: 
 do {
  
 }
}

-- Comments -> This is a MatchedRule: Daughter_2_Female -> 
rule Daughter_2_Female {
 from
  daughter_in : Families!Daughter
 to
  female_out : Persons!Female (
   fullName <- daughter_in.firstName
  ),
  Daughter_2_Female : TRACE!TraceLink (
   name <- 'Daughter_2_Female',
   traceModel <- thisModule.getTraceModelRoot,
   operation <- #Transform,
   source <- Sequence {daughter_in_Trace},
   target <- Sequence {female_out_Trace},
   childLinks <- Sequence {firstName_2_fullName}
  ),
  firstName_2_fullName : TRACE!TraceLink (
   name <- 'firstName_2_fullName',
   operation <- #Transform,
   source <- Sequence {firstname_in_Trace, "familydaughter.lastname_in_Trace"},
   target <- Sequence {fullname_out_Trace}
  ),
  daughter_in_Trace : TRACE!SourceElement (
   name <- daughter_in.getName(),
   ref <- daughter_in.__xmiID__,
   elementModel <- thisModule.create_Daughter_component(daughter_in)
  ),
  firstname_in_Trace : TRACE!SourceElement (
   name <- daughter_in.firstName
  ),
  "familydaughter.lastname_in_Trace" : TRACE!SourceElement (
   name <- daughter_in.familyDaughter.lastName
  ),
  female_out_Trace : TRACE!TargetElement (
   name <- female_out.getName(),
   ref <- female_out.__xmiID__,
   elementModel <- thisModule.create_Female_component(female_out)
  ),
  fullname_out_Trace : TRACE!TargetElement (
   name <- female_out.fullName
  )
 -- ActionBlock: 
 do {
  
 }
}

-- Comments -> This is a CalledRule to create the root of Trace Model
entrypoint rule CreateTraceModelRoot() {
 to
  root : TRACE!TraceModel
 -- ActionBlock: 
 do {
  thisModule.getTraceModelRoot <- root;
  thisModule.createSourceModel_c2_Families();
  thisModule.createTargetModel_c2_Persons();
 }
}

-- Comments -> This is a Helper to get the root of model trace 
helper def: getTraceModelRoot() : TRACE!TraceModel =
 OclUndefined;

-- Comments -> This is a Helper to get the element name 
helper context OclAny def: getName() : String =
 if self.oclIsUndefined() then
  ''
 else
  if self.oclIsKindOf(Sequence(OclAny)) then
   'Sequence(' + self->collect(e |
    e.getName()
   ) + ')'
  else
   if self.oclIsTypeOf(String) then
    self
   else
    if not self.eClass().getEAllStructuralFeatures()->collect(n |
     n.name
    )->select(f |
     f.toLower().indexOf('name') > - 1
    ).oclIsUndefined() then
     self.refGetValue(self.eClass().getEAllStructuralFeatures()->collect(n |
      n.name
     )->select(f |
      f.toLower().indexOf('name') > - 1
     ).first())
    else
     self.__xmiID__
    endif
   endif
  endif
 endif;

-- Comments -> This is a Helper to get the model Families_model
helper def: getModel_Families_model() : TRACE!TraceModel =
 OclUndefined;

-- Comments -> This is a CalledRule to create a source model c2 Families metamodel
rule createSourceModel_c2_Families() {
 to
  sourceM : TRACE!SourceModel (
   metamodel <- '/metagem_F2P/Metamodels/Families.ecore',
   traceModel <- thisModule.getTraceModelRoot,
   path <- Families!EPackage.generateModelRef('Families_model'),
   name <- 'Families_model'
  )
 -- ActionBlock: 
 do {
  thisModule.getModel_Families_model <- sourceM;
 }
}

-- Comments -> This is a Helper to get the model Persons_model
helper def: getModel_Persons_model() : TRACE!TraceModel =
 OclUndefined;

-- Comments -> This is a CalledRule to create a target model c2 Persons metamodel. You must fill some information manually
rule createTargetModel_c2_Persons() {
 to
  targetM : TRACE!TargetModel (
   metamodel <- '/metagem_F2P/Metamodels/Persons.ecore',
   traceModel <- thisModule.getTraceModelRoot,
   path <- 'USER: Fill this field manually',
   name <- 'Persons_model'
  )
 -- ActionBlock: 
 do {
  thisModule.getModel_Persons_model <- targetM;
 }
}

-- Comments -> This is a Helper: getFatherName
helper context Families!Father def: getFatherName() : String =
 self.firstName + ' ' + self.familyFather.lastName;

-- Comments -> This is a LazyRule to generate the Families element in the trace model
unique lazy rule create_Families_component {
 from
  families_in : Families!Families
 to
  families_out : TRACE!Element (
   name <- families_in.getName(),
   ref <- families_in.__xmiID__,
   model <- thisModule.getModel_Families_model
  )
}

-- Comments -> This is a LazyRule to generate the Family element in the trace model
unique lazy rule create_Family_component {
 from
  family_in : Families!Family
 to
  family_out : TRACE!Element (
   name <- family_in.getName(),
   ref <- family_in.__xmiID__,
   model <- thisModule.getModel_Families_model
  ),
  lastname_out : TRACE!Feature (
   name <- family_in.lastName.getName(),
   ref <- family_out.__xmiID__,
   parent <- family_out
  ),
  father_out : TRACE!Feature (
   name <- family_in.father.getName(),
   ref <- family_out.__xmiID__,
   parent <- family_out
  ),
  mother_out : TRACE!Feature (
   name <- family_in.mother.getName(),
   ref <- family_out.__xmiID__,
   parent <- family_out
  ),
  sons_out : TRACE!Feature (
   name <- family_in.sons.getName(),
   ref <- family_out.__xmiID__,
   parent <- family_out
  ),
  daughters_out : TRACE!Feature (
   name <- family_in.daughters.getName(),
   ref <- family_out.__xmiID__,
   parent <- family_out
  )
}

-- Comments -> This is a LazyRule to generate the Member element in the trace model
unique lazy rule create_Member_component {
 from
  member_in : Families!Member
 to
  member_out : TRACE!Element (
   name <- member_in.getName(),
   ref <- member_in.__xmiID__,
   model <- thisModule.getModel_Families_model
  ),
  firstname_out : TRACE!Feature (
   name <- member_in.firstName.getName(),
   ref <- member_out.__xmiID__,
   parent <- member_out
  )
}

-- Comments -> This is a LazyRule to generate the Father element in the trace model
unique lazy rule create_Father_component {
 from
  father_in : Families!Father
 to
  father_out : TRACE!Element (
   name <- father_in.getName(),
   ref <- father_in.__xmiID__,
   model <- thisModule.getModel_Families_model,
   super_element <- thisModule.create_Family_component(father_in.refImmediateComposite())
  ),
  familyfather_out : TRACE!Feature (
   name <- father_in.familyFather.getName(),
   ref <- father_out.__xmiID__,
   parent <- father_out
  )
}

-- Comments -> This is a LazyRule to generate the Mother element in the trace model
unique lazy rule create_Mother_component {
 from
  mother_in : Families!Mother
 to
  mother_out : TRACE!Element (
   name <- mother_in.getName(),
   ref <- mother_in.__xmiID__,
   model <- thisModule.getModel_Families_model,
   super_element <- thisModule.create_Family_component(mother_in.refImmediateComposite())
  ),
  familymother_out : TRACE!Feature (
   name <- mother_in.familyMother.getName(),
   ref <- mother_out.__xmiID__,
   parent <- mother_out
  )
}

-- Comments -> This is a LazyRule to generate the Son element in the trace model
unique lazy rule create_Son_component {
 from
  son_in : Families!Son
 to
  son_out : TRACE!Element (
   name <- son_in.getName(),
   ref <- son_in.__xmiID__,
   model <- thisModule.getModel_Families_model,
   super_element <- thisModule.create_Family_component(son_in.refImmediateComposite())
  ),
  familyson_out : TRACE!Feature (
   name <- son_in.familySon.getName(),
   ref <- son_out.__xmiID__,
   parent <- son_out
  )
}

-- Comments -> This is a LazyRule to generate the Daughter element in the trace model
unique lazy rule create_Daughter_component {
 from
  daughter_in : Families!Daughter
 to
  daughter_out : TRACE!Element (
   name <- daughter_in.getName(),
   ref <- daughter_in.__xmiID__,
   model <- thisModule.getModel_Families_model,
   super_element <- thisModule.create_Family_component(daughter_in.refImmediateComposite())
  ),
  familydaughter_out : TRACE!Feature (
   name <- daughter_in.familyDaughter.getName(),
   ref <- daughter_out.__xmiID__,
   parent <- daughter_out
  )
}

-- Comments -> This is a LazyRule to generate the Persons element in the trace model
unique lazy rule create_Persons_component {
 from
  persons_in : Persons!Persons
 to
  persons_out : TRACE!Element (
   name <- persons_in.getName(),
   ref <- persons_in.__xmiID__,
   model <- thisModule.getModel_Persons_model
  )
}

-- Comments -> This is a LazyRule to generate the Person element in the trace model
unique lazy rule create_Person_component {
 from
  person_in : Persons!Person
 to
  person_out : TRACE!Element (
   name <- person_in.getName(),
   ref <- person_in.__xmiID__,
   model <- thisModule.getModel_Persons_model
  ),
  fullname_out : TRACE!Feature (
   name <- person_in.fullName.getName(),
   ref <- person_out.__xmiID__,
   parent <- person_out
  )
}

-- Comments -> This is a LazyRule to generate the Male element in the trace model
unique lazy rule create_Male_component {
 from
  male_in : Persons!Male
 to
  male_out : TRACE!Element (
   name <- male_in.getName(),
   ref <- male_in.__xmiID__,
   model <- thisModule.getModel_Persons_model
  )
}

-- Comments -> This is a LazyRule to generate the Female element in the trace model
unique lazy rule create_Female_component {
 from
  female_in : Persons!Female
 to
  female_out : TRACE!Element (
   name <- female_in.getName(),
   ref <- female_in.__xmiID__,
   model <- thisModule.getModel_Persons_model
  )
}
