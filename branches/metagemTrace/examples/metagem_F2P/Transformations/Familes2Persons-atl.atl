-- @atlcompiler atl2006
module familes2persons;
create Persons_model : Persons, in2out_trace : TRACE from Families_model : Families;

-- Comments -> This is a MatchedRule: Father_2_Male -> 
rule Father_2_Male {
 from
  father_in : Families!Father
 to
  male_out : Persons!Male (
   fullName <- father_in.getFatherName()
  ),
  Father_2_Male_TL1 : TRACE!TraceLink (
   name <- 'Father_2_Male',
   traceModel <- thisModule.getTraceModelRoot,
   operation <- #Transform,
   source <- Sequence {father_in_Trace_TE1},
   target <- Sequence {male_out_Trace_TE11},
   childLinks <- Sequence {R8_TL5}
  ),
  R8_TL5 : TRACE!TraceLink (
   name <- 'R8',
   operation <- #Create,
   source <- Sequence {},
   target <- Sequence {fullname_out_Trace_TE15}
  ),
  father_in_Trace_TE1 : TRACE!SourceElement (
   name <- father_in.getName(),
   ref <- father_in.__xmiID__,
   model <- thisModule.getModel_Families_model
  ),
  male_out_Trace_TE11 : TRACE!TargetElement (
   name <- male_out.getName(),
   ref <- male_out.__xmiID__,
   model <- thisModule.getModel_Persons_model
  ),
  fullname_out_Trace_TE15 : TRACE!TargetElement (
   name <- male_out.fullName.toString() + '(Feature: fullname)',
   belongsTo <- male_out_Trace_TE11,
   model <- thisModule.getModel_Persons_model
  )
 -- ActionBlock: 
 do {
  
 }
}

-- Comments -> This is a MatchedRule: Mother_2_Female -> 
rule Mother_2_Female {
 from
  mother_in : Families!Mother
 to
  female_out : Persons!Female (
   fullName <- mother_in.firstName + mother_in.familyMother.lastName
  ),
  Mother_2_Female_TL2 : TRACE!TraceLink (
   name <- 'Mother_2_Female',
   traceModel <- thisModule.getTraceModelRoot,
   operation <- #Transform,
   source <- Sequence {mother_in_Trace_TE2},
   target <- Sequence {female_out_Trace_TE12},
   childLinks <- Sequence {firstName_2_fullName_TL6}
  ),
  firstName_2_fullName_TL6 : TRACE!TraceLink (
   name <- 'firstName_2_fullName',
   operation <- #Transform,
   source <- Sequence {firstname_in_Trace_TE5, "familymother.lastname_in_Trace_TE6"},
   target <- Sequence {fullname_out_Trace_TE16}
  ),
  mother_in_Trace_TE2 : TRACE!SourceElement (
   name <- mother_in.getName(),
   ref <- mother_in.__xmiID__,
   model <- thisModule.getModel_Families_model
  ),
  firstname_in_Trace_TE5 : TRACE!SourceElement (
   name <- mother_in.firstName.toString() + '(Feature: firstname)',
   belongsTo <- mother_in_Trace_TE2,
   model <- thisModule.getModel_Families_model
  ),
  "familymother.lastname_in_Trace_TE6" : TRACE!SourceElement (
   name <- mother_in.familyMother.lastName.toString() + '(Feature: familymother.lastname)',
   belongsTo <- mother_in_Trace_TE2,
   model <- thisModule.getModel_Families_model
  ),
  female_out_Trace_TE12 : TRACE!TargetElement (
   name <- female_out.getName(),
   ref <- female_out.__xmiID__,
   model <- thisModule.getModel_Persons_model
  ),
  fullname_out_Trace_TE16 : TRACE!TargetElement (
   name <- female_out.fullName.toString() + '(Feature: fullname)',
   belongsTo <- female_out_Trace_TE12,
   model <- thisModule.getModel_Persons_model
  )
 -- ActionBlock: 
 do {
  
 }
}

-- Comments -> This is a MatchedRule: Son_2_Male -> 
rule Son_2_Male {
 from
  son_in : Families!Son
 to
  male_out : Persons!Male (
   fullName <- son_in.firstName + son_in.familySon.lastName
  ),
  Son_2_Male_TL3 : TRACE!TraceLink (
   name <- 'Son_2_Male',
   traceModel <- thisModule.getTraceModelRoot,
   operation <- #Transform,
   source <- Sequence {son_in_Trace_TE3},
   target <- Sequence {male_out_Trace_TE13},
   childLinks <- Sequence {firstName_2_fullName_TL7}
  ),
  firstName_2_fullName_TL7 : TRACE!TraceLink (
   name <- 'firstName_2_fullName',
   operation <- #Transform,
   source <- Sequence {firstname_in_Trace_TE7, "familyson.lastname_in_Trace_TE8"},
   target <- Sequence {fullname_out_Trace_TE17}
  ),
  son_in_Trace_TE3 : TRACE!SourceElement (
   name <- son_in.getName(),
   ref <- son_in.__xmiID__,
   model <- thisModule.getModel_Families_model
  ),
  firstname_in_Trace_TE7 : TRACE!SourceElement (
   name <- son_in.firstName.toString() + '(Feature: firstname)',
   belongsTo <- son_in_Trace_TE3,
   model <- thisModule.getModel_Families_model
  ),
  "familyson.lastname_in_Trace_TE8" : TRACE!SourceElement (
   name <- son_in.familySon.lastName.toString() + '(Feature: familyson.lastname)',
   belongsTo <- son_in_Trace_TE3,
   model <- thisModule.getModel_Families_model
  ),
  male_out_Trace_TE13 : TRACE!TargetElement (
   name <- male_out.getName(),
   ref <- male_out.__xmiID__,
   model <- thisModule.getModel_Persons_model
  ),
  fullname_out_Trace_TE17 : TRACE!TargetElement (
   name <- male_out.fullName.toString() + '(Feature: fullname)',
   belongsTo <- male_out_Trace_TE13,
   model <- thisModule.getModel_Persons_model
  )
 -- ActionBlock: 
 do {
  
 }
}

-- Comments -> This is a MatchedRule: Daughter_2_Female -> 
rule Daughter_2_Female {
 from
  daughter_in : Families!Daughter
 to
  female_out : Persons!Female (
   fullName <- daughter_in.firstName + daughter_in.familyDaughter.lastName
  ),
  Daughter_2_Female_TL4 : TRACE!TraceLink (
   name <- 'Daughter_2_Female',
   traceModel <- thisModule.getTraceModelRoot,
   operation <- #Transform,
   source <- Sequence {daughter_in_Trace_TE4},
   target <- Sequence {female_out_Trace_TE14},
   childLinks <- Sequence {firstName_2_fullName_TL8}
  ),
  firstName_2_fullName_TL8 : TRACE!TraceLink (
   name <- 'firstName_2_fullName',
   operation <- #Transform,
   source <- Sequence {firstname_in_Trace_TE9, "familydaughter.lastname_in_Trace_TE10"},
   target <- Sequence {fullname_out_Trace_TE18}
  ),
  daughter_in_Trace_TE4 : TRACE!SourceElement (
   name <- daughter_in.getName(),
   ref <- daughter_in.__xmiID__,
   model <- thisModule.getModel_Families_model
  ),
  firstname_in_Trace_TE9 : TRACE!SourceElement (
   name <- daughter_in.firstName.toString() + '(Feature: firstname)',
   belongsTo <- daughter_in_Trace_TE4,
   model <- thisModule.getModel_Families_model
  ),
  "familydaughter.lastname_in_Trace_TE10" : TRACE!SourceElement (
   name <- daughter_in.familyDaughter.lastName.toString() + '(Feature: familydaughter.lastname)',
   belongsTo <- daughter_in_Trace_TE4,
   model <- thisModule.getModel_Families_model
  ),
  female_out_Trace_TE14 : TRACE!TargetElement (
   name <- female_out.getName(),
   ref <- female_out.__xmiID__,
   model <- thisModule.getModel_Persons_model
  ),
  fullname_out_Trace_TE18 : TRACE!TargetElement (
   name <- female_out.fullName.toString() + '(Feature: fullname)',
   belongsTo <- female_out_Trace_TE14,
   model <- thisModule.getModel_Persons_model
  )
 -- ActionBlock: 
 do {
  
 }
}

-- Comments -> This is a CalledRule to create the root of Trace Model
entrypoint rule CreateTraceModelRoot() {
 to
  root : TRACE!TraceModel
 -- ActionBlock: 
 do {
  thisModule.getTraceModelRoot <- root;
  thisModule.createSourceModel_c2_Families();
  thisModule.createTargetModel_c2_Persons();
 }
}

-- Comments -> This is a Helper to get the root of model trace 
helper def: getTraceModelRoot() : TRACE!TraceModel =
 OclUndefined;

-- Comments -> This is a Helper to get the element name 
helper context OclAny def: getName() : String =
 if self.oclIsUndefined() then
  ''
 else
  if self.oclIsKindOf(Sequence(OclAny)) then
   'Sequence(' + self->collect(e |
    e.getName()
   ) + ')'
  else
   if self.oclIsTypeOf(String) then
    self
   else
    if self.eClass().getEAllStructuralFeatures()->collect(n |
     n.name
    )->select(f |
     f.toLower().indexOf('name') > - 1
    ).size()>0 then
     self.refGetValue(self.eClass().getEAllStructuralFeatures()->collect(n |
      n.name
     )->select(f |
      f.toLower().indexOf('name') > - 1
     ).first())
    else
     self.__xmiID__
    endif
   endif
  endif
 endif;

-- Comments -> This is a Helper to get the model Families_model
helper def: getModel_Families_model() : TRACE!TraceModel =
 OclUndefined;

-- Comments -> This is a CalledRule to create a source model c2 Families metamodel
rule createSourceModel_c2_Families() {
 to
  sourceM : TRACE!SourceModel (
   metamodel <- '/metagem_F2P/Metamodels/Families.ecore',
   traceModel <- thisModule.getTraceModelRoot,
   path <- Families!EPackage.generateModelRef('Families_model'),
   name <- 'Families_model'
  )
 -- ActionBlock: 
 do {
  thisModule.getModel_Families_model <- sourceM;
 }
}

-- Comments -> This is a Helper to get the model Persons_model
helper def: getModel_Persons_model() : TRACE!TraceModel =
 OclUndefined;

-- Comments -> This is a CalledRule to create a target model c2 Persons metamodel. You must fill some information manually
rule createTargetModel_c2_Persons() {
 to
  targetM : TRACE!TargetModel (
   metamodel <- '/metagem_F2P/Metamodels/Persons.ecore',
   traceModel <- thisModule.getTraceModelRoot,
   path <- 'USER: Fill this field manually',
   name <- 'Persons_model'
  )
 -- ActionBlock: 
 do {
  thisModule.getModel_Persons_model <- targetM;
 }
}

-- Comments -> This is a Helper: getFatherName
helper context Families!Father def: getFatherName() : String =
 self.firstName + ' ' + self.familyFather.lastName;

