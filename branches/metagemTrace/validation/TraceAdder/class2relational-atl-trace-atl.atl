module Class2Relational;
create OUT : Relational, trace : Trace from IN : Class;

--uses strings; -- if there is a configuration problem with the library string,
-- delete the two firstToLower() operations and you no longer need the library "strings"
-- the transfomarion will execute 
-- inheritance not supported yet
-- issue: choose an object-id Type (Integer, String?).
-- We choose Integer here, assuming this type is defined in the source model.
-- global variable
-- context 
-- if there is a configuration problem with the library string,
-- delete the two firstToLower() operations and you no longer need the library "strings"
-- the transfomarion will execute 
-- inheritance not supported yet
-- issue: choose an object-id Type (Integer, String?).
-- We choose Integer here, assuming this type is defined in the source model.
-- global variable
-- context 
helper def: objectIdType : Relational!Type =
 Class!DataType.allInstances()->select(e |
  e.name = 'Integer'
 )->first();

rule Class2Table {
 from
  c : Class!Class
 to
  out : Relational!Table (
   name <- c.name,
   -- Columns are generated from Attributes in another rule not explicitly called here !
   col <- Sequence {key}->union(c.attr->select(e |
    not e.multiValued
   )),
   key <- Set {key}
  ),
  key : Relational!Column (
   name <- 'objectId',
   type <- thisModule.objectIdType
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'Class2Table',
   targetElements <- Sequence {out, key}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {c});
 }
}

rule DataType2Type {
 from
  dt : Class!DataType
 to
  out : Relational!Type (
   name <- dt.name
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'DataType2Type',
   targetElements <- Sequence {out}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {dt});
 }
}

rule DataTypeAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!DataType) and not a.multiValued
  )
 to
  out : Relational!Column (
   name <- a.name,
   type <- a.type -- explicit use of implicit tracking links (first expected syntax, then present actual syntax)
   --			owner <- [Class2Type.key]a.owner
   --			owner <- thisModule.resolveTemp(a.owner, 'key')
   -- explicit use of implicit tracking links (first expected syntax, then present actual syntax)
   --			owner <- [Class2Type.key]a.owner
   --			owner <- thisModule.resolveTemp(a.owner, 'key')
   
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'DataTypeAttribute2Column',
   targetElements <- Sequence {out}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {a});
 }
}

rule MultiValuedDataTypeAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!DataType) and a.multiValued
  )
 to
  out : Relational!Table (
   name <- a.owner.name + '_' + a.name,
   col <- Sequence {id, value}
  ),
  id : Relational!Column (
   name <- a.owner.name.toLower() + 'Id',
   type <- thisModule.objectIdType
  ),
  value : Relational!Column (
   name <- a.name,
   type <- a.type
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'MultiValuedDataTypeAttribute2Column',
   targetElements <- Sequence {out,id,value}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {a});
 }
}

rule ClassAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!Class) and not a.multiValued
  )
 to
  foreignKey : Relational!Column (
   name <- a.name + 'Id',
   type <- thisModule.objectIdType
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'ClassAttribute2Column',
   targetElements <- Sequence {foreignKey}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {a});
 }
}

rule MultiValuedClassAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!Class) and a.multiValued
  )
 to
  t : Relational!Table (
   name <- a.owner.name + '_' + a.name,
   col <- Sequence {id, foreignKey}
  ),
  id : Relational!Column (
   name <- a.owner.name.toLower() + 'Id',
   type <- thisModule.objectIdType
  ),
  foreignKey : Relational!Column (
   name <- a.name + 'Id',
   type <- thisModule.objectIdType
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'MultiValuedClassAttribute2Column',
   targetElements <- Sequence {t,id,foreignKey}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {a});
 }
}
