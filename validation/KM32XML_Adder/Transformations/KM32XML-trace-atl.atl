-- @atlcompiler atl2006
module km32xml;
create OUT : XML, trace : Trace from IN : KM3;

abstract rule ModelElement {
 from
  i : KM3!ModelElement
 to
  attribute_name : XML!Attribute (
   name <- 'name',
   value <- i.name
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'ModelElement',
   targetElements <- Sequence {attribute_name}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {i});
 }
}

rule Metamodel {
 from
  i : KM3!Metamodel
 to
  o : XML!Root (
   name <- 'Metamodel',
   children <- i.contents
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'Metamodel',
   targetElements <- Sequence {o}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {i});
 }
}

rule Package extends ModelElement {
 from
  i : KM3!Package
 to
  o : XML!Element (
   name <- 'Package',
   children <- Sequence {attribute_name}->union(i.contents)
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'Package',
   targetElements <- Sequence {o}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {i});
 }
}

rule Class extends ModelElement {
 from
  i : KM3!Class
 to
  o : XML!Element (
   name <- 'Class',
   children <- Sequence {attribute_name, attribute_isAbstract, reference_supertypes}->union(i.structuralFeatures)
  ),
  attribute_isAbstract : XML!Attribute (
   name <- 'isAbstract',
   value <- i.isAbstract->toString()
  ),
  reference_supertypes : XML!Attribute (
   name <- 'supertypes',
   value <- i.supertypes->iterate(e; acc : String = '' |
    if acc = '' then
     acc
    else
     acc + ', '
    endif + e.getFQL()
   )
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'Class',
   targetElements <- Sequence {o, attribute_isAbstract, reference_supertypes}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {i});
 }
}

rule DataType extends ModelElement {
 from
  i : KM3!DataType
 to
  o : XML!Element (
   name <- 'DataType',
   children <- Sequence {attribute_name}
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'DataType',
   targetElements <- Sequence {o}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {i});
 }
}

rule Enumeration extends ModelElement {
 from
  i : KM3!Enumeration
 to
  o : XML!Element (
   name <- 'Enumeration',
   children <- Sequence {attribute_name}->union(i.literals)
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'Enumeration',
   targetElements <- Sequence {o}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {i});
 }
}

rule EnumLiteral extends ModelElement {
 from
  i : KM3!EnumLiteral
 to
  o : XML!Element (
   name <- 'EnumLiteral',
   children <- Sequence {attribute_name}
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'EnumLiteral',
   targetElements <- Sequence {o}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {i});
 }
}

abstract rule StructuralFeature extends ModelElement {
 from
  i : KM3!StructuralFeature
 to
  attribute_lower : XML!Attribute (
   name <- 'lower',
   value <- i.lower->toString()
  ),
  attribute_upper : XML!Attribute (
   name <- 'upper',
   value <- i.upper->toString()
  ),
  attribute_isOrdered : XML!Attribute (
   name <- 'isOrdered',
   value <- i.isOrdered->toString()
  ),
  reference_type : XML!Attribute (
   name <- 'type',
   value <- i.type.getFQL()
  ) --type
  ,
  traceLink : Trace!TraceLink (
   ruleName <- 'StructuralFeature',
   targetElements <- Sequence {attribute_lower, attribute_upper, attribute_isOrdered, reference_type}
  ) --type
 do {
  traceLink.refSetValue('sourceElements', Sequence {i});
 }
}

rule Attribute extends StructuralFeature {
 from
  i : KM3!Attribute
 to
  o : XML!Element (
   name <- 'Attribute',
   children <- Sequence {attribute_name, attribute_lower, attribute_upper, attribute_isOrdered, attribute_isUnique, reference_type}
  ),
  attribute_isUnique : XML!Attribute (
   name <- 'isUnique',
   value <- i.isUnique->toString()
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'Attribute',
   targetElements <- Sequence {o, attribute_isUnique}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {i});
 }
}

rule Reference extends StructuralFeature {
 from
  i : KM3!Reference
 to
  o : XML!Element (
   name <- 'Reference',
   children <- Sequence {attribute_name, attribute_lower, attribute_upper, attribute_isOrdered, attribute_isContainer, reference_type, reference_opposite}
  ),
  attribute_isContainer : XML!Attribute (
   name <- 'isContainer',
   value <- i.isContainer->toString()
  ),
  reference_opposite : XML!Attribute (
   name <- 'opposite',
   value <- if i.opposite->oclIsUndefined() then
    ''
   else
    i.opposite.getFQL()
   endif
  ),
  traceLink : Trace!TraceLink (
   ruleName <- 'Reference',
   targetElements <- Sequence {o, attribute_isContainer, reference_opposite}
  )
 do {
  traceLink.refSetValue('sourceElements', Sequence {i});
 }
}

helper context KM3!ModelElement def: getFQL() : String =
 self.getFQLWithSeparator('::');

helper context KM3!ModelElement def: getFQLWithSeparator(separator : String) : String =
 if self.oclIsKindOf(KM3!EnumLiteral) then
  if self.enumeration <> OclUndefined then
   self.enumeration.getFQLWithSeparator(separator) + separator + self.name
  else
   self.name
  endif
 else
  if self.oclIsKindOf(KM3!StructuralFeature) then
   if self.owner <> OclUndefined then
    self.owner.getFQLWithSeparator(separator) + separator + self.name
   else
    self.name
   endif
  else
   if self.oclIsKindOf(KM3!Classifier) then
    if self.package <> OclUndefined then
     self.package.getFQLWithSeparator(separator) + separator + self.name
    else
     self.name
    endif
   else
    self.name
   endif
  endif
 endif;
