-- @path ATL=/Hybrid2ATL/ATL.ecore
-- @path Hybrid=/Hybrid2ATL/Hybrid.ecore

module Hybrid2ATL;
create OUT : ATL from IN : Hybrid;

-- Create module header
rule Module {
	from 
		hybrid : Hybrid!Module
	to
		atl : ATL!Module (
			isRefining <- false,
			name <- hybrid.name.debug('Module'),
		    inModels <- hybrid.sourceModels,
			outModels <- hybrid.targetModels.append(traceModel),
			elements <- hybrid.rules,
			commentsBefore <- Set {'-- @atlcompiler atl2006'}
		),
		
		traceModel: ATL!OclModel(
			name <- 'in2out_trace',
			metamodel <- ametamodelTrace
		),
		ametamodelTrace : ATL!OclModel (
			name <- 'TRACE'
		),
		
		-- this called rule creates the root of the trace model
		createTraceModelRoot : ATL!CalledRule (
			name <- 'CreateTraceModelRoot'.debug('CalledRule'),
			outPattern <- outPattern,
			"module" <- hybrid,
			actionBlock <- anAction,
			isEntrypoint <- true, --To create first the trace model root
			commentsBefore <- Set {'-- Comments -> This is a CalledRule to create the root of Trace Model'}
		),
		outPattern : ATL!OutPattern(
			elements <- root_simpleOutPattern
		),
		root_simpleOutPattern : ATL!SimpleOutPatternElement (
			varName <- 'root',
			type <- aType
		),
		aType : ATL!OclModelElement(
			name <- 'TraceModel',
			model <- ametamodelTrace 
		),
		
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '},
			statements <- Sequence{bindingStat,hybrid.sourceModels->collect(e|thisModule.resolveTemp(e,'createModelRule_expStat')),
						hybrid.targetModels->collect(e|thisModule.resolveTemp(e,'createModelRule_expStat'))}
		),
		bindingStat: ATL!BindingStat(
			source <- navigation,
			value <- variableExp1
		),
		variableExp1: ATL!VariableExp(
			referredVariable <- variableDeclaration1
		),
		navigation: ATL!NavigationOrAttributeCallExp(
			name <- 'getTraceModelRoot',
			source<-variableExp2
		),
		variableDeclaration1: ATL!VariableDeclaration (
			varName <- 'root'
		),
		variableExp2: ATL!VariableExp(
			referredVariable <- variableDeclaration2
		),
		variableDeclaration2: ATL!VariableDeclaration (
			varName <- 'thisModule'
		),
		
		--creates a helper to get the root of the model trace
		modelRoot_var : ATL!Helper (
			"module" <- hybrid,
			definition <- adefinition,
			commentsBefore <- Set {'-- Comments -> This is a Helper to get the root of model trace '}
		),
		adefinition : ATL!OclFeatureDefinition (
			feature <- afeature
		),
		afeature : ATL!Operation (
			name <- 'getTraceModelRoot',
			returnType <- aType2,
			body <- undefined
		),
		aType2 : ATL!OclModelElement(
			name <- 'TraceModel',
			model <- ametamodelTrace 
		),
		undefined : ATL!OclUndefinedExp,
		
		--this helper returns the element name
		elementNameGen_var : ATL!Helper (
			"module" <- hybrid,
			definition <- adefinition_name,
			commentsBefore <- Set {'-- Comments -> This is a Helper to get the element name '}
		),
		adefinition_name : ATL!OclFeatureDefinition (
			feature <-opName,
			context_ <- contextName
		),
		opName : ATL!Operation(
			name <- 'getName',
			definition <- adefinition_name,
			returnType <- string,
			body <- bodyHelperName
		),
		bodyHelperName: ATL!IfExp(
			owningOperation <- opName,
			condition <- conditionPart,
			thenExpression<-thenPart,
			elseExpression<- elsePart
		),
		
		conditionPart: ATL!OperatorCallExp(
			ifExp1 <- bodyHelperName,
			operationName <- 'not',
			source <-op1
		),
		op1: ATL!OperationCallExp(
			appliedProperty <-conditionPart,
			operationName <- 'oclIsUndefined',
			source <- iterator
		),
		iterator: ATL!IteratorExp (
			appliedProperty <-op1,
			name <- 'select',
			source <- iter_exp_collect,
			body<-operatorCall_body,
			iterators<-iterator2
		),
		iter_exp_collect: ATL!IteratorExp (
			name <- 'collect',
			appliedProperty <-iterator,
			source <- op_getEAllStructuralFeatures,
			body<-att_name,
			iterators<-iterator_n
		),
		att_name: ATL!NavigationOrAttributeCallExp(
			name <- 'name',
			loopExp<-iter_exp_collect,
			source<-varExp_att_name
		),
		varExp_att_name: ATL!VariableExp(
			appliedProperty <-att_name,
			referredVariable <-	iterator_n
		),
		op_getEAllStructuralFeatures: ATL!OperationCallExp(
			appliedProperty <-iter_exp_collect,
			operationName <- 'getEAllStructuralFeatures',
			source <- opCall_eClass
		),
		opCall_eClass: ATL!OperationCallExp(
			appliedProperty <-op_getEAllStructuralFeatures,
			operationName <- 'eClass',
			source <- variableExp_self
		),
		variableExp_self: ATL!VariableExp(
			appliedProperty <- opCall_eClass,
			referredVariable <- var_self
		),
		var_self: ATL!VariableDeclaration (
			varName <- 'self'
		),
		iterator_n: ATL!Iterator(
			varName <-'n',
			loopExpr <- iter_exp_collect,
			variableExp <- varExp_att_name
		),
		operatorCall_body: ATL!OperatorCallExp(
			operationName <- '>',
			loopExp <- iterator,
			source <- operationCall_source,
			arguments <- operatorCall_arg
		),
		operationCall_source: ATL!OperationCallExp(
			appliedProperty <-operatorCall_body,
			operationName <- 'indexOf',
			source <-opCallExp_toLower,
			arguments <- string_Exp_name
		),
		opCallExp_toLower: ATL!OperationCallExp (
			appliedProperty <-operationCall_source,
			operationName <- 'toLower',
			source <- varExp_it
		),
		varExp_it: ATL!VariableExp(
			appliedProperty <-opCallExp_toLower,
			referredVariable <-	iterator2
		),
		string_Exp_name: ATL!StringExp(
			parentOperation <- operationCall_source,
			stringSymbol<-'name'
		),
		operatorCall_arg: ATL!OperatorCallExp(
			operationName <- '-',
			parentOperation <- operatorCall_body,
			source <- integer_exp
		),
		integer_exp: ATL!IntegerExp(
			appliedProperty <-operatorCall_arg,
			integerSymbol <- 1	
		),
		iterator2: ATL!Iterator(
			varName <-'f',
			loopExpr <- iterator,
			variableExp <-varExp_it
		),
		
		thenPart: ATL!OperationCallExp (
			operationName <- 'refGetValue',
			ifExp2 <- bodyHelperName,
			source <- variableExp_self1,
			arguments <- opCall_first
		),
		variableExp_self1: ATL!VariableExp(
			appliedProperty <- thenPart,
			referredVariable <- var_self1
		),
		var_self1: ATL!VariableDeclaration (
			varName <- 'self'
		),
		opCall_first: ATL!OperationCallExp (
			parentOperation <-thenPart,
			operationName <- 'first',
			source <- iterator_then
		),
		iterator_then: ATL!IteratorExp (
			appliedProperty <-opCall_first,
			name <- 'select',
			source <- iter_exp_collect2,
			body<-operatorCall_body2,
			iterators<-iterator3
		),
		
		iter_exp_collect2: ATL!IteratorExp (
			name <- 'collect',
			appliedProperty <-iterator_then,
			source <- op_getEAllStructuralFeatures2,
			body<-att_name2,
			iterators<-iterator_n2
		),
		att_name2: ATL!NavigationOrAttributeCallExp(
			name <- 'name',
			loopExp<-iter_exp_collect2,
			source<-varExp_att_name2
		),
		varExp_att_name2: ATL!VariableExp(
			appliedProperty <-att_name2,
			referredVariable <-	iterator_n2
		),
		op_getEAllStructuralFeatures2: ATL!OperationCallExp(
			appliedProperty <-iter_exp_collect2,
			operationName <- 'getEAllStructuralFeatures',
			source <- opCall_eClass2
		),
		opCall_eClass2: ATL!OperationCallExp(
			appliedProperty <-op_getEAllStructuralFeatures2,
			operationName <- 'eClass',
			source <- variableExp_self2
		),
		variableExp_self2: ATL!VariableExp(
			appliedProperty <- opCall_eClass2,
			referredVariable <- var_self2
		),
		var_self2: ATL!VariableDeclaration (
			varName <- 'self'
		),
		iterator_n2: ATL!Iterator(
			varName <-'n',
			loopExpr <- iter_exp_collect2,
			variableExp <- varExp_att_name2
		),
		
		
		operatorCall_body2: ATL!OperatorCallExp(
			operationName <- '>',
			loopExp <- iterator_then,
			source <- operationCall_source2,
			arguments <- operatorCall_arg2
		),
		operationCall_source2: ATL!OperationCallExp(
			appliedProperty <-operatorCall_body2,
			operationName <- 'indexOf',
			source <-opCallExp_toLower2,
			arguments <- string_Exp_name2
		),
		opCallExp_toLower2: ATL!OperationCallExp (
			appliedProperty <-operationCall_source2,
			operationName <- 'toLower',
			source <- varExp_it2
		),
		varExp_it2: ATL!VariableExp(
			appliedProperty <-opCallExp_toLower2,
			referredVariable <-	iterator3
		),
		string_Exp_name2: ATL!StringExp(
			parentOperation <- operationCall_source2,
			stringSymbol<-'name'
		),
		operatorCall_arg2: ATL!OperatorCallExp(
			operationName <- '-',
			parentOperation <- operatorCall_body2,
			source <- integer_exp2
		),
		integer_exp2: ATL!IntegerExp(
			appliedProperty <-operatorCall_arg2,
			integerSymbol <- 1	
		),
		iterator3: ATL!Iterator(
			varName <-'f',
			loopExpr <- iterator_then,
			variableExp <-varExp_it2
		),
		
		elsePart: ATL!NavigationOrAttributeCallExp(
			name <- '__xmiID__',
			source<-variableExp_self3
		),
		variableExp_self3: ATL!VariableExp(
			appliedProperty <- elsePart,
			referredVariable <- var_self3
		),
		var_self3: ATL!VariableDeclaration (
			varName <- 'self'
		),
		string: ATL!StringType(
			operation<-opName
		),
		contextName: ATL!OclContextDefinition(
			definition <- adefinition_name,
			context_ <- oclAny
		),
		oclAny: ATL!OclAnyType
		
}

rule inMM{
	from
		source_hybrid : Hybrid!SourceModel
	to
		MM : ATL!OclModel(
			name <- source_hybrid.name,
			metamodel <- ametamodelMM
		),
		ametamodelMM : ATL!OclModel (
			name <- source_hybrid.type_mm
		),
		
		--creates a helper to get the model 
		model_helper : ATL!Helper (
			"module" <- source_hybrid.refImmediateComposite(),
			definition <- adefinition,
			commentsBefore <- Set {'-- Comments -> This is a Helper to get the model '+source_hybrid.name}
		),
		adefinition : ATL!OclFeatureDefinition (
			feature <- afeature
		),
		afeature : ATL!Operation (
			name <- 'getModel_'+source_hybrid.name,
			returnType <- aType2,
			body <- undefined
		),
		aType2 : ATL!OclModelElement(
			name <- 'TraceModel',
			model <- thisModule.resolveTemp(source_hybrid.refImmediateComposite(),'ametamodelTrace') 
		),
		undefined : ATL!OclUndefinedExp,
		
		createSourceModel_trace: ATL!CalledRule (
			name <- 'createSourceModel_c2_'.concat(source_hybrid.type_mm).debug('CalledRule'),
			outPattern <- outPattern,
			module <- source_hybrid."module",
			actionBlock <- anAction,
			commentsBefore <- Set {'-- Comments -> This is a CalledRule to create a source model c2 '+source_hybrid.type_mm+' metamodel'}
		),
		outPattern : ATL!OutPattern(
			elements <- sourceModelpattern	
		),
		sourceModelpattern : ATL!SimpleOutPatternElement (
			varName <- 'sourceM',
			type <- aTypeTrace,
			bindings <- Sequence{metamodel, traceM, path, name}
		),
		aTypeTrace : ATL!OclModelElement(
			name <- 'SourceModel',
			model <- thisModule.resolveTemp(source_hybrid.refImmediateComposite(),'ametamodelTrace') 
		),
		metamodel: ATL!Binding(
			propertyName <- 'metamodel',
			value <- metamodelPath
		),
		metamodelPath: ATL!StringExp (
			stringSymbol <- source_hybrid.path
		),
		
		traceM : ATL!Binding(
			propertyName <- 'traceModel',
			value <- navCall
		),
		navCall: ATL!NavigationOrAttributeCallExp(
			name <- 'getTraceModelRoot',
			source <- varNavCall
		),
		varNavCall:ATL!VariableExp(
			appliedProperty <- navCall,
			referredVariable <- varDeclNavCall
		),
		varDeclNavCall:ATL!VariableDeclaration(
			varName<-'thisModule'
		),
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '},
			statements <- bindingStat
		),
		bindingStat: ATL!BindingStat(
			source <- navigation,
			value <- variableExp1
		),
		variableExp1: ATL!VariableExp(
			referredVariable <- variableDeclaration1
		),
		navigation: ATL!NavigationOrAttributeCallExp(
			name <- 'getModel_'+source_hybrid.name,
			source<-variableExp2
		),
		variableDeclaration1: ATL!VariableDeclaration (
			varName <- 'sourceM'
		),
		variableExp2: ATL!VariableExp(
			referredVariable <- variableDeclaration2
		),
		variableDeclaration2: ATL!VariableDeclaration (
			varName <- 'thisModule'
		),
		
		--To call the creation rule from the 'do' part of the trace root creation rule
		createModelRule_expStat: ATL!ExpressionStat(
			expression <- expOp
		),
		expOp : ATL!OperationCallExp(
			operationName <- 'createSourceModel_c2_'.concat(source_hybrid.type_mm),
			arguments <- varOpCall
		),
		varOpCall:ATL!VariableExp(
			appliedProperty <- expOp,
			referredVariable <- varDeclNavCall
		),
		
		--To assign the path of the source model
		path: ATL!Binding(
			propertyName <- 'path',
			value <- opCall_path
		),
		opCall_path: ATL!OperationCallExp(
			operationName <- 'generateModelRef',
			source <- modelNameExp,
			arguments <- packageElement
		),
		modelNameExp: ATL!StringExp (
			parentOperation <- opCall_path,
			stringSymbol <- source_hybrid.name
		),
		packageElement: ATL! OclModelElement(
			name <- 'EPackage',
			appliedProperty <- opCall_path,
			model <- ametamodelMM
		),
		
		-- We assign the path of the model to the name of the model
		name: ATL!Binding(
			propertyName <- 'name',
			value <- _modelNameExp
		),
		_modelNameExp: ATL!StringExp (
			stringSymbol <- source_hybrid.name
		)
}

rule outMM{
	from
		target_hybrid : Hybrid!TargetModel
	to
		MM : ATL!OclModel(
			name <- target_hybrid.name,
			metamodel <- ametamodelMM
		),
		ametamodelMM : ATL!OclModel (
			name <- target_hybrid.type_mm
		),
		
		--creates a helper to get the model 
		model_helper : ATL!Helper (
			"module" <- target_hybrid.refImmediateComposite(),
			definition <- adefinition,
			commentsBefore <- Set {'-- Comments -> This is a Helper to get the model '+target_hybrid.name}
		),
		adefinition : ATL!OclFeatureDefinition (
			feature <- afeature
		),
		afeature : ATL!Operation (
			name <- 'getModel_'+target_hybrid.name,
			returnType <- aType2,
			body <- undefined
		),
		aType2 : ATL!OclModelElement(
			name <- 'TraceModel',
			model <- thisModule.resolveTemp(target_hybrid.refImmediateComposite(),'ametamodelTrace') 
		),
		undefined : ATL!OclUndefinedExp,
		
		createTargetModel_trace: ATL!CalledRule (
			name <- 'createTargetModel_c2_'.concat(target_hybrid.type_mm).debug('CalledRule'),
			outPattern <- outPattern,
			module <- target_hybrid."module",
			actionBlock <- anAction,
			commentsBefore <- Set {'-- Comments -> This is a CalledRule to create a target model c2 '+target_hybrid.type_mm+' metamodel'}
		),
		outPattern : ATL!OutPattern(
			elements <- targetModelpattern	
		),
		targetModelpattern : ATL!SimpleOutPatternElement (
			varName <- 'targetM',
			type <- aTypeTrace,
			bindings <- Sequence{metamodel, traceM, path, name}
		),
		aTypeTrace : ATL!OclModelElement(
			name <- 'TargetModel',
			model <- thisModule.resolveTemp(target_hybrid.refImmediateComposite(),'ametamodelTrace') 
		),
		metamodel: ATL!Binding(
			propertyName <- 'metamodel',
			value <- metamodelPath
		),
		metamodelPath: ATL!StringExp (
			stringSymbol <- target_hybrid.path
		),
		
		traceM : ATL!Binding(
			propertyName <- 'traceModel',
			value <- navCall
		),
		navCall: ATL!NavigationOrAttributeCallExp(
			name <- 'getTraceModelRoot',
			source <- varNavCall
		),
		varNavCall:ATL!VariableExp(
			appliedProperty <- navCall,
			referredVariable <- varDeclNavCall
		),
		varDeclNavCall:ATL!VariableDeclaration(
			varName<-'thisModule'
		),
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '},
			statements <- bindingStat
		),
		bindingStat: ATL!BindingStat(
			source <- navigation,
			value <- variableExp1
		),
		variableExp1: ATL!VariableExp(
			referredVariable <- variableDeclaration1
		),
		navigation: ATL!NavigationOrAttributeCallExp(
			name <- 'getModel_'+target_hybrid.name,
			source<-variableExp2
		),
		variableDeclaration1: ATL!VariableDeclaration (
			varName <- 'targetM'
		),
		variableExp2: ATL!VariableExp(
			referredVariable <- variableDeclaration2
		),
		variableDeclaration2: ATL!VariableDeclaration (
			varName <- 'thisModule'
		),
		
		createModelRule_expStat: ATL!ExpressionStat(
			expression <- expOp
		),
		expOp : ATL!OperationCallExp(
			operationName <- 'createTargetModel_c2_'.concat(target_hybrid.type_mm),
			arguments <- varOpCall
		),
		varOpCall:ATL!VariableExp(
			appliedProperty <- expOp,
			referredVariable <- varDeclNavCall
		),
		
		--To assign the path of the target model
		path: ATL!Binding(
			propertyName <- 'path',
			value <- opCall_path
		),
		opCall_path: ATL!OperationCallExp(
			operationName <- 'generateModelRef',
			source <- modelNameExp,
			arguments <- packageElement
		),
		modelNameExp: ATL!StringExp (
			parentOperation <- opCall_path,
			stringSymbol <- target_hybrid.name
		),
		packageElement: ATL! OclModelElement(
			name <- 'EPackage',
			appliedProperty <- opCall_path,
			model <- ametamodelMM
		),
		
		-- We assign the path of the model to the name of the model
		name: ATL!Binding(
			propertyName <- 'name',
			value <- _modelNameExp
		),
		_modelNameExp: ATL!StringExp (
			stringSymbol <- target_hybrid.name
		)
}

-- Create MatchedRule 
rule createRule2MatchedRule{
	from 
		hybrid_rule : Hybrid!Rule 
		(hybrid_rule.isMain=true and hybrid_rule.getSizeIP()>0)
	to
		atl : ATL!MatchedRule (
			name <- hybrid_rule.name.debug('MatchedRule'),
			isAbstract <- hybrid_rule.isAbstract,
			isRefining <- false,
			isNoDefault <- false,
			superRule <- hybrid_rule."extends",
			inPattern <- inPattern, 
			outPattern <- outPattern,
			actionBlock <- anAction,
			commentsBefore <- Set {'-- Comments -> This is a MatchedRule: ' + hybrid_rule.name + ' -> ' + hybrid_rule.getComment()}
		),
		inPattern : ATL!InPattern (
			elements <- hybrid_rule.sources.asSequence(),
			filter <- hybrid_rule.getGuard()
		),
		outPattern : ATL!OutPattern(
			elements <- hybrid_rule.targets.asSequence().append(hybrid_rule.trace).append(hybrid_rule.trace.traceBindings)
		),
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '}	
		)
}

rule createRule2LazyRule{ 
	from 
		hybrid_rule : Hybrid!Rule 
		(hybrid_rule.isMain=false and hybrid_rule.isUnique=false and hybrid_rule.getSizeIP()>0)
	to
		atl : ATL!LazyMatchedRule (
			name <- hybrid_rule.name.debug('LazyRule'),
			isAbstract <- hybrid_rule.isAbstract,
			isRefining <- false,
			isNoDefault <- false,
			isUnique <- false,
			inPattern <- inPattern,
			outPattern <- outPattern,
			actionBlock <- anAction,
			commentsBefore <- Set {'-- Comments -> This is a LazyRule: ' + hybrid_rule.name + ' -> ' + hybrid_rule.getComment()}
		),
		inPattern : ATL!InPattern (
			elements <- hybrid_rule.sources.asSequence(),
			filter <- hybrid_rule.getGuard()
		),
		outPattern : ATL!OutPattern(
			elements <- hybrid_rule.targets.asSequence().append(hybrid_rule.trace).append(hybrid_rule.trace.traceBindings)		
		),
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '}	
		)
}

-- Create UniqueLazyRule
rule createRule2UniqueLazyRule{
	from 
		hybrid_rule : Hybrid!Rule 
		(hybrid_rule.isMain=false and hybrid_rule.isUnique=true and hybrid_rule.getSizeIP()>0)
	to
		atl : ATL!LazyMatchedRule (
			name <- hybrid_rule.name.debug('Unique LazyRule'),
			isAbstract <- hybrid_rule.isAbstract,
			isRefining <- false,
			isNoDefault <- false,
			isUnique <- true,
			inPattern <- inPattern,
			outPattern <- outPattern,
			actionBlock <- anAction,
			commentsBefore <- Set {'-- Comments -> This is a LazyRule: ' + hybrid_rule.name + ' -> ' + hybrid_rule.getComment()}
		),
		inPattern : ATL!InPattern (
			elements <- hybrid_rule.sources.asSequence(),
			filter <- hybrid_rule.getGuard()
		),
		outPattern : ATL!OutPattern(
			elements <- hybrid_rule.targets.asSequence().append(hybrid_rule.trace).append(hybrid_rule.trace.traceBindings)		
		),
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '}	
		)
}

-- Create CalledRule [0..1] - [0..N] 
rule createRule2CalledRule{
	from 
		hybrid_rule : Hybrid!Rule (hybrid_rule.getSizeIP()=0)
	to
		atl : ATL!CalledRule (
			name <- hybrid_rule.name.debug('CalledRule'),
			outPattern <- outPattern,
			actionBlock <- anAction,
			commentsBefore <- Set {'-- Comments -> This is a CalledRule: ' + hybrid_rule.name + ' -> ' + hybrid_rule.getComment()}
		),
		outPattern : ATL!OutPattern(
			elements <- hybrid_rule.out.asSequence().append(hybrid_rule.trace).append(hybrid_rule.trace.traceBindings)	
		),
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '}	
		)
}

--InputPattern (from part)
rule InPatternElement {
	from 
		inPattern : Hybrid!Source (inPattern.refImmediateComposite().oclIsTypeOf(Hybrid!Rule))
	to
		atl : ATL!SimpleInPatternElement (
			varName <- inPattern.name.toLower()+'_in',
			type <- aType
		),
		aType : ATL!OclModelElement(
			name <- inPattern.name,
			model <- thisModule.resolveTemp(inPattern.component.getModel(),'ametamodelMM')
		),
		trace_element: ATL!SimpleOutPatternElement (
			varName <- inPattern.name.toLower()+'_in_Trace',
			outPattern <- thisModule.resolveTemp(inPattern."rule",'outPattern'),
			type <- aType_trace,
			bindings <- Sequence{nameBinding, refBinding, sourceElementLink}
		),
		aType_trace : ATL!OclModelElement(
			name <- 'SourceElement',
			model <- thisModule.resolveTemp(inPattern.refImmediateComposite().refImmediateComposite(),'ametamodelTrace') 
		),
		nameBinding: ATL!Binding (
			propertyName <- 'name',
			value <- nameTraceElement
		),
		nameTraceElement: ATL!OperationCallExp (
			operationName <- 'getName',
			source<-variableExp
		),
		variableExp: ATL!VariableExp(
			referredVariable <- inPattern
		),
		refBinding: ATL!Binding (
			propertyName <- 'ref',
			value <- refTraceElement
		),
		refTraceElement: ATL!NavigationOrAttributeCallExp(
			name <- '__xmiID__',
			source<-variableExp2
		),
		variableExp2: ATL!VariableExp(
			referredVariable <- inPattern
		),
		trace_elVar: ATL!VariableExp(
			collection <- thisModule.resolveTemp(inPattern.rule.trace,'sourceSeq'),
			referredVariable <- trace_element
		),
		sourceElementLink: ATL!Binding(
			propertyName <- 'elementModel',
			value <- elementTrace
		),
		elementTrace: ATL!OperationCallExp (
			operationName <- 'create_'+inPattern.component.name+'_element',
			source<-variableExp3,
			arguments <-variableExp4
		),
		variableExp3: ATL!VariableExp(
			referredVariable <- variableDeclaration
		),
		variableDeclaration: ATL!VariableDeclaration (
			varName <- 'thisModule'
		),
		variableExp4: ATL!VariableExp(
			referredVariable <- atl
		)		
}

--OutputPattern (to part)
rule OutPatternElement { 
	from
		outPattern : Hybrid!Target (outPattern.refImmediateComposite().oclIsTypeOf(Hybrid!Rule))
	to
		atl : ATL!SimpleOutPatternElement (
			varName <- outPattern.name.toLower()+'_out',
			type <- aType,
			bindings <- outPattern.bindings
		),
		aType : ATL!OclModelElement(
			name <- outPattern.name,
			model <- thisModule.resolveTemp(outPattern.component.getModel(),'ametamodelMM') 
		),
		trace_element: ATL!SimpleOutPatternElement (
			varName <- outPattern.name.toLower()+'_in_Trace',
			outPattern <- thisModule.resolveTemp(outPattern."rule",'outPattern'),
			type <- aType_trace,
			bindings <- Sequence{nameBinding, refBinding, targetElementLink}
		),
		aType_trace : ATL!OclModelElement(
			name <- 'TargetElement',
			model <- thisModule.resolveTemp(outPattern.refImmediateComposite().refImmediateComposite(),'ametamodelTrace') 
		),
		nameBinding: ATL!Binding (
			propertyName <- 'name',
			value <- nameTraceElement
		),
		nameTraceElement: ATL!OperationCallExp (
			operationName <- 'getName',
			source<-variableExp
		),
		variableExp: ATL!VariableExp(
			referredVariable <- outPattern
		),
		refBinding: ATL!Binding (
			propertyName <- 'ref',
			value <- refTraceElement
		),
		refTraceElement: ATL!NavigationOrAttributeCallExp(
			name <- '__xmiID__',
			source<-variableExp2
		),
		variableExp2: ATL!VariableExp(
			referredVariable <- outPattern
		),
		trace_elVar: ATL!VariableExp(
			collection <- thisModule.resolveTemp(outPattern.rule.trace,'targetSeq'),
			referredVariable <- trace_element
		),
		targetElementLink: ATL!Binding(
			propertyName <- 'elementModel',
			value <- elementTrace
		),
		elementTrace: ATL!OperationCallExp (
			operationName <- 'create_'+outPattern.component.name+'_element',
			source<-variableExp3,
			arguments <-variableExp4
		),
		variableExp3: ATL!VariableExp(
			referredVariable <- variableDeclaration
		),
		variableDeclaration: ATL!VariableDeclaration (
			varName <- 'thisModule'
		),
		variableExp4: ATL!VariableExp(
			referredVariable <- atl
		)
}

-- Bindigs: (TargetElements <- SourceElements)
rule Bindings {
	from 
		binding : Hybrid!Binding
	to
		atl_binding : ATL!Binding (
			--Left side of formula, that will receive the value
			propertyName <- binding.left.target.name,
			--Right side of formula, that has the value - issues
			value <- binding.getBindingSource()
		)
}

lazy rule getConcreteBinding {
	from
		binding : Hybrid!Binding
	to 
		source : ATL!VariableExp(
			referredVariable <- areferred	
		),
		areferred : ATL!VariableDeclaration(
			varName <- binding.right.concreteValue
		) 		
}

lazy rule getSimpleBinding {
	from
		binding : Hybrid!Binding
	to 
		source : ATL!VariableExp(
			referredVariable <- areferred	
		),
		areferred : ATL!VariableDeclaration(
			varName <- binding.getReferredVariable() 
		) 		
}

lazy rule getComplexBinding {
	from
		binding : Hybrid!Binding
	to
		value : ATL!NavigationOrAttributeCallExp(
			name <- binding.getValueBinding(),
			source <- asource
		),
		asource : ATL!VariableExp(
			referredVariable <- areferred	
		),
		areferred : ATL!VariableDeclaration(
			varName <- binding.getReferredVariable()
		) 
}

-- Called Rule -> Create concatenation on Bindings
rule CreateConcatBinding (binding : Hybrid!Binding, attrRefs : Sequence(String)){
	to
		operation : ATL!OperatorCallExp (
			operationName <- '+'
		)
	do {
		operation.source <- thisModule.CreateReferredConcatElement(binding, attrRefs.first());
		if(attrRefs->size() = 2) {
			operation.arguments <- thisModule.CreateReferredConcatElement(binding, attrRefs->last());
		} else {
			operation.arguments <- thisModule.CreateConcatBinding(binding, attrRefs->subSequence(2, attrRefs->size()));
		}
		operation;
	}
		}

rule CreateReferredConcatElement(binding : Hybrid!Binding, attrRef : String) {	-- : ATL!NavigationOrAttributeCallExp
	to
		subelement : ATL!NavigationOrAttributeCallExp (
			--name <- attrRef, --AQUI	binding.getValueBinding(),		
			source <- asource
		),	 						
		asource : ATL!VariableExp (
			referredVariable <- areferred	
		),
		areferred : ATL!VariableDeclaration(
			varName <- binding.getReferredVariable()
		)
	do {
		
		if(binding.right."rule".asSequence().first().oclIsUndefined() and 
		binding.right.operation.asSequence().first().oclIsUndefined()) {
			subelement.name <- attrRef;
		} else {
			if (not binding.right."rule".asSequence().first().oclIsUndefined()) {
				subelement.name <- attrRef + '.' + binding.right."rule".asSequence().first().name;
			} else {
				if (not binding.right.operation.asSequence().first().oclIsUndefined()) {
					subelement.name <- attrRef + '.' + binding.right.operation.asSequence().first().name;
				} else{
					OclUndefined;
				  }
			  }
		  }
		subelement;
	}
}

lazy rule getSimpleContext {
	from
		oper : Hybrid!Operation
	to
		acontext : ATL!OclContextDefinition (
			context_ <- acontextin
		),
		acontextin : ATL!OclModelElement (
			name <- oper."context".name,
			model <- amodelin	
		),
		amodelin : ATL!OclModel(
			name <- oper."context".getModel().name
		) 
}

lazy rule getReturnStringType {
	from
		oper : Hybrid!Operation
	to
		returnType : ATL!StringType 
}

lazy rule getReturnIntegerType {
	from
		oper : Hybrid!Operation
	to
		returnType : ATL!IntegerType 
}


lazy rule getReturnBooleanType {
	from
		oper : Hybrid!Operation
	to
		returnType : ATL!BooleanType 
}


lazy rule getReturnElementType {
	from
		oper : Hybrid!Operation
	to
		areturnType : ATL!OclModelElement (
			name <- oper.return.component.name,
			model <- amodel
		),
		amodel : ATL!OclModel (
			name <- oper.return.component.getModel().name				
		) 
}

-- Create Helper with ReturnType 
rule createOperation2Helper {
	from
		oper : Hybrid!Operation 
	to
		atl : ATL!Helper (
			"module" <- oper.refImmediateComposite(),
			definition <- adefinition,
			commentsBefore <- Set {'-- Comments -> This is a Helper: ' + oper.name_operation},
			commentsAfter <- Set {'-- Body: ' + oper.body}
		),
		adefinition : ATL!OclFeatureDefinition (
			feature <- afeature,
			context_ <- oper.getContext()
		),
		afeature : ATL!Operation (
			name <- oper.name,
			returnType <- oper.getReturnType()
		)
}

lazy rule getFilterExp {
	from
		hybrid_rule : Hybrid!Rule
	to 
		filter : ATL!VariableExp(
			commentsAfter <- hybrid_rule.getCommentFilter() 
	)
}

-- TRACE
-- =======================================

--TraceLink_Rule
rule TraceRule2CreateTraceLink{
	from 
		traceRule: Hybrid!TraceRule
	to
		atl : ATL!SimpleOutPatternElement (
			varName <- traceRule.name,
			type <- aType,
			bindings <- Sequence {name, traceM, operation, source, target, childLinks}
		),
		aType : ATL!OclModelElement(
			name <- 'TraceLink',
			model <- thisModule.resolveTemp(traceRule.refImmediateComposite().refImmediateComposite(),'ametamodelTrace') 
		),
		name: ATL!Binding (
			propertyName <- 'name',
			value <- nameTraceLink
		),
		nameTraceLink: ATL!StringExp (
			stringSymbol <- traceRule.name
		),
		
		traceM : ATL!Binding(
			propertyName <- 'traceModel',
			value <- navCall
		),
		navCall: ATL!NavigationOrAttributeCallExp(
			name <- 'getTraceModelRoot',
			source <- varNavCall
		),
		varNavCall:ATL!VariableExp(
			appliedProperty <- navCall,
			referredVariable <- varDeclNavCall
		),
		varDeclNavCall:ATL!VariableDeclaration(
			varName<-'thisModule'
		),
		
		operation: ATL!Binding (
			propertyName <- 'operation',
			value <- enum
		),
		enum : ATL!EnumLiteralExp(
			name <- 'Transform'
		),
		source: ATL!Binding (
			propertyName <- 'source',
			value <- sourceSeq
		),
		
		sourceSeq: ATL!SequenceExp(
			elements <- traceRule.source->collect(e|thisModule.resolveTemp(e,'trace_elVar'))
		),
		
		target: ATL!Binding (
			propertyName <- 'target',
			value <- targetSeq
		),
		targetSeq: ATL!SequenceExp(
			elements <- traceRule.target->collect(e|thisModule.resolveTemp(e,'trace_elVar'))
		),
		
		childLinks: ATL!Binding(
			propertyName <- 'childLinks',
			value <- childSeq
		),
		childSeq: ATL!SequenceExp(
			elements <- traceRule.traceBindings->collect(e|thisModule.resolveTemp(e,'traceBinding_var'))
		)

}

--TraceLink_Binding
rule TraceBinding2CreateTraceLink{
	from 
		traceBinding: Hybrid!TraceBinding
	to
		patternTrace : ATL!SimpleOutPatternElement (
			varName <- traceBinding.name,
			type <- aType,
			bindings <- Sequence {name, operation}
		),
		aType : ATL!OclModelElement(
			name <- 'TraceLink',
			model <- thisModule.resolveTemp(traceBinding.refImmediateComposite().refImmediateComposite().refImmediateComposite(),'ametamodelTrace') 
		),
		name: ATL!Binding (
			propertyName <- 'name',
			value <- nameTraceLink
		),
		nameTraceLink: ATL!StringExp (
			stringSymbol <- traceBinding.name
		),
			
		operation: ATL!Binding (
			propertyName <- 'operation',
			value <- enum
		),
		enum : ATL!EnumLiteralExp(
			name <- 'Transform'
		),
		traceBinding_var: ATL!VariableExp(
			collection <- thisModule.resolveTemp(traceBinding.parent,'childSeq'),
			referredVariable <- patternTrace
		)
}

-- Creates a unique lazy rule to create a Model Element 
rule ModelElement_Trace{
	from 
		m_element : Hybrid!ModelElement
	to
		createElement: ATL!LazyMatchedRule (
			name <- ('create_'+m_element.name+'_element').debug('Unique LazyRule'),
			isAbstract <- false,
			isRefining <- false,
			isNoDefault <- false,
			isUnique <- true,
			inPattern <- inPattern,
			outPattern <- outPattern,
			"module" <- m_element.getModel().refImmediateComposite(),
			commentsBefore <- Set {'-- Comments -> This is a LazyRule to generate the '+m_element.name+' element in the trace model'}
		),
		inPattern : ATL!InPattern (
			elements <- mElement
		),
		outPattern : ATL!OutPattern(
			elements <- trace_element
		),
		
		mElement : ATL!SimpleInPatternElement (
			varName <- m_element.name.toLower()+'_in',
			type <- aTypeIN
		),
		aTypeIN : ATL!OclModelElement(
			name <- m_element.name,
			model <- thisModule.resolveTemp(m_element.getModel(),'ametamodelMM')
		),
		
		trace_element : ATL!SimpleOutPatternElement (
			varName <- m_element.name.toLower()+'_out',
			type <- aTypeOUT,
			bindings <- Sequence{name, ref, model}--, super_element, features}
		),
		aTypeOUT : ATL!OclModelElement(
			name <- 'Element',
			model <- thisModule.resolveTemp(m_element.getModel().refImmediateComposite(),'ametamodelTrace') 
		),
		name: ATL!Binding (
			propertyName <- 'name',
			value <- nameTraceElement
		),
		nameTraceElement: ATL!OperationCallExp (
			operationName <- 'getName',
			source<-variableExp
		),
		variableExp: ATL!VariableExp(
			referredVariable <- mElement
		),
		ref: ATL!Binding (
			propertyName <- 'ref',
			value <- refTraceElement
		),
		refTraceElement: ATL!NavigationOrAttributeCallExp(
			name <- '__xmiID__',
			source<-variableExp2
		),
		variableExp2: ATL!VariableExp(
			referredVariable <- mElement
		),
		model: ATL!Binding (
			propertyName <- 'model',
			value <- navCall
		),
		navCall: ATL!NavigationOrAttributeCallExp(
			name <- 'getModel_'+thisModule.resolveTemp(m_element.getModel(),'MM').name,
			source <- varNavCall
		),
		varNavCall:ATL!VariableExp(
			appliedProperty <- navCall,
			referredVariable <- varDeclNavCall
		),
		varDeclNavCall:ATL!VariableDeclaration(
			varName<-'thisModule'
		)
		--super_element: ATL!Binding (
		--	propertyName <- 'super_element',
		--	value <- superElement
		--),
		--superElement: ATL!NavigationOrAttributeCallExp (
		--	name <- 'parentElement',
		--	source<-variableExp4
		--),
		--variableExp4: ATL!VariableExp(
		--	referredVariable <- mElement
		--)
}

-- HELPERS
-- ==================================================================


-- To call the ReturnType lazy rule
helper context Hybrid!Operation def : getReturnType () : ATL!OclExpression =
	if self.returnType.oclIsUndefined() then
		OclUndefined
	else
		if self.returnType.Datatype = #"String" then
			thisModule.getReturnStringType(self)
		else 
			if self.returnType.Datatype = #"Integer" then
				thisModule.getReturnIntegerType(self)
			else 
				if self.returnType.Datatype = #"Boolean" then
					thisModule.getReturnBooleanType(self)
				else
					thisModule.getReturnElementType(self)
				endif
			endif
		endif
	endif;


-- To call the context lazy rule or Undefined 
helper context Hybrid!Operation def : getContext () : ATL!OclExpression =
	if self."context".oclIsUndefined() then
		OclUndefined
	else
		thisModule.getSimpleContext(self)
	endif;

-- Helper -> To call the correct lazy rule to define the Binding
helper context Hybrid!Binding def : getBindingSource() : ATL!OclExpression =
		if self.typeRelation = #"concatenation" then
			thisModule.CreateConcatBinding(self, self.right.source.asSequence()->collect(i | i.name))
		else
			if (self.right."rule".asSequence().first().oclIsUndefined() and 
				self.right.operation.asSequence().first().oclIsUndefined() and
				self.right.source.asSequence().first().oclIsUndefined() and
				self.right.reference.oclIsUndefined()) then
					thisModule.getConcreteBinding(self)
			else
				if (not self.right.reference.oclIsUndefined()) then
					if self.right.reference.oclIsTypeOf(Hybrid!Source) then
						thisModule.getComplexBinding(self)
					else
						thisModule.getSimpleBinding(self)
					endif
				else
					thisModule.getComplexBinding(self)
			endif
		endif
	endif;

-- Helper -> Define the source binding (Element, Rule, Helper or Reference)
helper context Hybrid!Binding def : getValueBinding () : ATL!OclExpression =  
	--rule undefined, operation undefined, srcElement undefined, reference defined	
	if (self.right."rule".asSequence().first().oclIsUndefined() and 
		self.right.operation.asSequence().first().oclIsUndefined() and
		self.right.source.asSequence().first().oclIsUndefined() and
		not self.right.reference.oclIsUndefined()) then
			OclUndefined
	else --reference undefined
		--rule undefined
		if self.right."rule".asSequence().first().oclIsUndefined() then
			--rule undefined and operation undefined
			if self.right.operation.asSequence().first().oclIsUndefined() then
				self.right.source.asSequence().first().name  
			--rule undefined and operation defined 
			else
				--rule undefined, operation defined and source undefined
				if self.right.source.asSequence().first().oclIsUndefined() then
					self.right.operation.asSequence().first().name
				-- rule undefined, operation defined and srcElement defined 
				else 
					self.right.sourceElement.asSequence().first().name + '.' + self.right.operation.asSequence().first().name 
				endif
			endif
		--rule defined (operation undefined by validation)		
		else
			--rule defined and srcElement undefined
			if self.right.sourceElement.asSequence().first().oclIsUndefined() then
				self.right."rule".asSequence().first().name
			--rule defined and source defined
			else  
				self.right.source.asSequence().first().name + '.' + self.right."rule".asSequence().first().name 
			endif
		endif
	endif;

-- Helper -> Return the variable used on source binding
helper context Hybrid!Binding def : getReferredVariable () : ATL!OclExpression = --String =
	if self.refImmediateComposite().refImmediateComposite().sources.asSequence().first().oclIsUndefined()  then
		OclUndefined --'???' 
	else
		if self.right.reference.oclIsUndefined() then
			self.refImmediateComposite().refImmediateComposite().sources.asSequence().first().name.toLower()+'_in'
		else
			if self.right.reference.oclIsTypeOf(Hybrid!Source) then
				self.right.reference.name.toLower()+'_in'
			else
				self.right.reference.name.toLower()+'_out'
			endif
		endif
	endif;

--Helper -> Return the model of the component
helper context Hybrid!ModelComponent def : getModel(): Hybrid!Model =
	if self.oclIsTypeOf(Hybrid!ModelFeature) then
		self.ownedElement.getModel()
	else
		if self.ownedModel.oclIsUndefined() then
			self.parentElement.getModel()
		else
			self.ownedModel
		endif
	endif
	;

--Helper -> Return the number of inputsPatterns 
helper context Hybrid!Rule def : getSizeIP() : Integer = 
	self.sources.size();

--Helper -> Return the comment of the rule 
helper context Hybrid!Rule def : getComment() : String = 
	if self.comment.oclIsUndefined() then
		''
	else
		self.comment
	endif
	;

--Helper -> Return the guard value of the rule 
helper context Hybrid!Rule def : getGuard() : ATL!OclExpression = 
	if self.guard.oclIsUndefined() then
		OclUndefined
	else
		thisModule.getFilterExp(self)
	endif
	;


-- Helper -> Return the filter expression
helper context Hybrid!Rule def : getCommentFilter () : String = 
	self.guard.value
	;


