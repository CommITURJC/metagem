
-- ***********************************************************************************
--	Operations Ecore
-- ***********************************************************************************

-- Returns a class from Ecore Model
operation getEcoreClass(name:String):ECore!EClass{
	return ECore!EClass.all.selectOne(n|n.name=name);
}


-- ***********************************************************************************
--	Operations GMFgraph
-- ***********************************************************************************

-- Creates a GmfGraph!Compartment associated to a FigureDescriptor and adds it to Canvas.
operation GmfGraph!Canvas insertCompartment(name : String, figure: GmfGraph!FigureDescriptor){
	var comp = new GmfGraph!Compartment;
	comp.name=name;
	comp.collapsible=true;
	comp.figure=figure;
	self.compartments.add(comp);
}

-- Creates a Label and returns it (indicated for Stereotypes)
operation createStereotypeLabel(name: String, text: String): GmfGraph!Label{
	var newLabel = new GmfGraph!Label;
	newLabel.Name=name;
	newLabel.Text=text;
	var myfont = new GmfGraph!BasicFont;
	myfont.Height=8;
	myfont.Style=GmfGraph!FontStyle#BOLD.instance;
	newLabel.font=myfont;
	
	return newLabel;
}

-- Creates a DiagramLabel associated to a Figure that consists of a label
operation createNodeLabel(name: String, text: String, figureGallery: GmfGraph!FigureGallery ): GmfGraph!DiagramLabel{
	var newLabel = new GmfGraph!Label;
	newLabel.Name=name+'Name';
	newLabel.Text=text;
	var myfont = new GmfGraph!BasicFont;
	myfont.Height=8;
	newLabel.font=myfont;
	
	var FigureDesc = new GmfGraph!FigureDescriptor;
	FigureDesc.name = name+'Figure';
	FigureDesc.actualFigure=newLabel;
	figureGallery.descriptors.add(FigureDesc);
	var DiagLabel = new GmfGraph!DiagramLabel;
	DiagLabel.name = name+'Name';
	DiagLabel.figure = FigureDesc;
	DiagLabel.elementIcon = false;
	
	return DiagLabel;
}


-- Creates a GmfGraph!Point
operation createPoint(x:Integer, y: Integer):GmfGraph!Point{
	var point= new GmfGraph!Point;
	point.x=x;
	point.y=y;
	
	return point;
}

-- Adds a Connection to the Canvas.
operation GmfGraph!Canvas addConnection(name: String, figure: GmfGraph!FigureDescriptor){
	var conn= new GmfGraph!Connection;
	conn.figure=figure;
	conn.name= name;
	self.connections.add(conn);
}

-- Creates a DiagramLabel associated to a figure (Contents a ChildAccess)
operation createDiagramLabel(name: String, figure: GmfGraph!FigureDescriptor, accessor: GmfGraph!ChildAccess):GmfGraph!DiagramLabel{
	var DiagramLabel = new GmfGraph!DiagramLabel;
	DiagramLabel.name = name;
	DiagramLabel.figure = figure;
	DiagramLabel.accessor = accessor;
	DiagramLabel.elementIcon = false;
	
	return DiagramLabel;
}

-- Creates a PolylineConnection decorated with Polylines
operation createPolylineConnection(name:String, sourceDecoration:GmfGraph!PolylineDecoration, 
								targetDecoration:GmfGraph!PolylineDecoration, color: GmfGraph!ConstantColor):GmfGraph!PolylineConnection{
	var line = new GmfGraph!PolylineConnection;
	line.name = name;
	line.sourceDecoration = sourceDecoration;
	line.targetDecoration = targetDecoration;
	line.foregroundColor = color;
	
	return line;
}

-- Creates a PolylineConnection decorated with Polygons 
operation createPolylineConnection(name:String, sourceDecoration:GmfGraph!PolygonDecoration, 
								targetDecoration:GmfGraph!PolygonDecoration, color: GmfGraph!ConstantColor):GmfGraph!PolylineConnection{
	var line = new GmfGraph!PolylineConnection;
	line.name = name;
	line.sourceDecoration = sourceDecoration;
	line.targetDecoration = targetDecoration;
	line.foregroundColor = color;
	
	return line;
}

-- Creates a PolylineConnection decorated with a Polygon(source) and a Polyline(target)  
operation createPolylineConnection(name:String, sourceDecoration:GmfGraph!PolygonDecoration, 
								targetDecoration:GmfGraph!PolylineDecoration, color: GmfGraph!ConstantColor):GmfGraph!PolylineConnection{
	var line = new GmfGraph!PolylineConnection;
	line.name = name;
	line.sourceDecoration = sourceDecoration;
	line.targetDecoration = targetDecoration;
	line.foregroundColor = color;
	
	return line;
}

-- Creates a PolylineConnection decorated with a Polyline(source) and a Polygon(target) 
operation createPolylineConnection(name:String, sourceDecoration:GmfGraph!PolylineDecoration, 
								targetDecoration:GmfGraph!PolygonDecoration, color: GmfGraph!ConstantColor):GmfGraph!PolylineConnection{
	var line = new GmfGraph!PolylineConnection;
	line.name = name;
	line.sourceDecoration = sourceDecoration;
	line.targetDecoration = targetDecoration;
	line.foregroundColor = color;
	
	return line;
}

-- Returns a FigureDescriptor
operation getFigureDescriptor(name:String):GmfGraph!FigureDescriptor{
	return GmfGraph!FigureDescriptor.selectOne(n|n.name=name);
}

-- Returns a RoundedRectangle
operation getRoundedRectangle(name:String):GmfGraph!RoundedRectangle{
	return GmfGraph!RoundedRectangle.selectOne(n|n.name=name);
}

-- Returns a Rectangle
operation getRectangle(name:String):GmfGraph!Rectangle{
	return GmfGraph!Rectangle.selectOne(n|n.name=name);
}

-- Returns a DiagramLabel
operation getDiagramLabel(name:String):GmfGraph!DiagramLabel{
	return GmfGraph!DiagramLabel.selectOne(n|n.name=name);
}

-- Returns a Node
operation getNode(name:String):GmfGraph!Node{
	return GmfGraph!Node.selectOne(n|n.name=name);
}

-- Returns a common Flow Layout
operation getMyFlowLayout():GmfGraph!FlowLayout{
	var mylayout=new GmfGraph!FlowLayout;
	mylayout.vertical=true;
	mylayout.matchMinorSize=true;
    mylayout.forceSingleLine=true;
    mylayout.majorAlignment=GmfGraph!Alignment#CENTER.instance;
    mylayout.minorAlignment=GmfGraph!Alignment#CENTER.instance;
    mylayout.majorSpacing=0;
    mylayout.minorSpacing=0;
    
    return mylayout;
}

-- Returns a Connection
operation getConnection(name: String):GmfGraph!Connection{
	return GmfGraph!Connection.selectOne(n|n.name=name);
}

-- ***********************************************************************************
--	Operations GMFtool
-- ***********************************************************************************

-- Add a new tool to ToolGroup
operation GmfTool!ToolGroup insertTool(title: String, description: String){
	var Tool=new GmfTool!CreationTool;
	Tool.title=title;
	Tool.description=description;
	var img1=new GmfTool!DefaultImage;
	var img2=new GmfTool!DefaultImage;
	Tool.smallIcon=img1;
	Tool.largeIcon=img2;
	self.tools.add(Tool);
}

-- Returns a CreationTool
operation getCreationTool(title:String):GmfTool!CreationTool{
	return GmfTool!CreationTool.selectOne(n|n.title=title);
}

-- ***********************************************************************************
--	Operations GMFmap
-- ***********************************************************************************

-- Adds a new Compartment to NodeMapping
operation GmfMap!NodeMapping addCompartment(compartmentFigureName: String){
	var compartmentFigure = GmfGraph!Compartment.selectOne(n|n.name=compartmentFigureName);
	var newCompartment = new GmfMap!CompartmentMapping;
	newCompartment.Compartment=compartmentFigure;
	self.compartments.add(newCompartment);
}

-- Creates a FeatureLabelMapping with pattern (Receives a collection of features)
operation createFeatureLabelMapping(diagramLabel:GmfGraph!DiagramLabel, pattern:String, feature:Collection):GmfMap!FeatureLabelMapping{
	var flm = new GmfMap!FeatureLabelMapping;
	flm.diagramLabel=diagramLabel;
	flm.viewPattern=pattern;
	for(i_feature:ECore!EAttribute in feature){
		flm.features.add(i_feature);
	}
	
	
	return flm;
}

-- Create a LabelMapping
operation createLabelMapping(label:String, readOnly:Boolean):GmfMap!LabelMapping{
	var lm = new GmfMap!LabelMapping;
	lm.diagramLabel=getDiagramLabel(label);
	lm.readOnly=readOnly;
	
	return lm;
}

-- Creates a NodeMapping (Graph element is a DiagramLabel)
operation createNodeMapping(tool:GmfTool!CreationTool, elementModel:ECore!EClass, elementDiagram:GmfGraph!DiagramLabel): GmfMap!NodeMapping {
	var NodeMap = new GmfMap!NodeMapping;
	NodeMap.tool=tool;
	NodeMap.domainMetaElement=elementModel;
	NodeMap.diagramNode=elementDiagram;
	
	return NodeMap;
}

-- Creates a NodeMapping (Graph element is a Node)
operation createNodeMapping(tool:GmfTool!CreationTool, elementModel:ECore!EClass, elementDiagram:GmfGraph!Node): GmfMap!NodeMapping {
	var NodeMap = new GmfMap!NodeMapping;
	NodeMap.tool=tool;
	NodeMap.domainMetaElement=elementModel;
	NodeMap.diagramNode=elementDiagram;
	
	return NodeMap;
}

-- Creates a LinkMapping to represent feature 
operation createLinkMapping(creationToolTitle: String, connection: String, feature:ECore!EReference):GmfMap!LinkMapping{
	var linkMap = new GmfMap!LinkMapping;
	linkMap.tool = getCreationTool(creationToolTitle);
	linkMap.DiagramLink = getConnection(connection);
	linkMap.linkMetaFeature = feature;
	
	return linkMap;
}

-- Adds a ChildMapping to a NodeMapping
operation GmfMap!NodeMapping addChildMapping(nodeMap:GmfMap!NodeMapping, feature:ECore!EReference, compartment:String){
	var child=new GmfMap!ChildReference;
	child.ownedChild=nodeMap;
	child.containmentFeature=feature;
	var compartmentFigure = GmfGraph!Compartment.selectOne(n|n.name=compartment);
	child.compartment=GmfMap!CompartmentMapping.all.selectOne(n|n.compartment=compartmentFigure);

	self.children.add(child);
}

-- Returns a NodeMapping
operation getNodeMapping(domainMetaElement:String):GmfMap!NodeMapping{
	return GmfMap!NodeMapping.selectOne(n|n.domainMetaElement.name=domainMetaElement);
}