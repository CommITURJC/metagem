module MeTAGeM2ATL; -- Module Template
create OUT : ATL from IN : AMW, left : MOF, rigth : MOF;

helper def : countRules : Integer = 1;
 
	
rule Module {
	from 
		amw : AMW!ModelRoot
	to
		atl : ATL!Module (
			isRefining <- false,
			name <- amw.name.debug('nombremodulo'),
		    inModels <- amw.inputModel,
			outModels <- amw.outputModel,	
			elements <- amw.relations,
			commentsBefore <- Set {'-- @atlcompiler atl2006'}
		)
}

helper def : getInstanceById(modelName : String, classifierID : String) : MOF!EClassifier =
	MOF!EModelElement.getInstanceById(modelName,classifierID);

helper def : getLeftInstance(classifierID : String) : MOF!EModelElement = 
	thisModule.getInstanceById('left',classifierID);
--
helper def : getRightInstance(classifierID : String) : MOF!EModelElement = 
	thisModule.getInstanceById('right',classifierID);

helper context AMW!Relations def : getRuleName () : String = 
	if self.name.oclIsUndefined() then
		self.getInOutPatternName()
	else
		if self.name = '' then
			self.getInOutPatternName()
		else
			self.name
		endif
	endif;

helper context AMW!Relations def : getInOutPatternName () : String =
	if not self.source.oclIsUndefined() and not self.target.oclIsUndefined() then
		self.source.name + '_2_'+ self.target->select ( e | true )->first().name
	else
		'R' + thisModule.countRules
	endif;

helper context AMW!WLinkEnd def : getVarName() : String =
	if self.varName.oclIsUndefined() then
		self.name
	else
		if self.varName = '' then
			self.name
		else
			self.varName
		endif
	endif;
--	
--
--
-----------------------------------------------------------------------
----initializes model elements into the transformation
---- models from left 
--
rule LeftModelRef {
	from 
		amw : AMW!InModelTransf
	to 
		atl : ATL!OclModel (			
			metamodel <- ametamodel,
			name <- amw.name + '_model'
		),
		ametamodel : ATL!OclModel (
			name <- amw.name,
			elements <- MOF!EClassifier.allInstancesFrom('left')
		)	
				
}
--
---- model elements: the same rule for left or right
rule Classifiers {
	from 
		element : MOF!EClassifier 
	to 
		atl : ATL!OclModelElement (
			name <- element.name
		)
}

---- model from right
rule RightModelRef {
	from 
		amw : AMW!OutModelTransf
	to 
		atl : ATL!OclModel (			
			metamodel <- ametamodel,
			name <- amw.name + '_model'
		),
		ametamodel : ATL!OclModel (
			name <- amw.name,
			elements <- MOF!EClassifier.allInstancesFrom('right') 
		)		
}
--
-----------------------------------------------
-----------------------creates the inicial rule 
rule createRule {
	from
		amw: AMW!Relations (amw.typeE = #MyEclassifier.debug('Classifier'))
	to
		atl : ATL!MatchedRule (
			name <- amw.getRuleName().debug('NombreRegla'),
--			isAbstract <- amw.isAbstract,
--			isRefining <- amw.isRefining,
			inPattern <- amw.source,
		    outPattern <- outPattern
			--superRule <- amw.parent
		),
		outPattern : ATL!OutPattern (
			elements <-  amw.target
		) 
	do {
		thisModule.countRules <- thisModule.countRules + 1;
	}
 }			


-------- the in pattern
rule InPatternElement {
	from --elements of a model -- source Element
		amw: AMW!InElement  	
	to
		atl: ATL!InPattern (
				elements <- element
			),
		element : ATL!SimpleInPatternElement(
				varName <- amw.getVarName(),
				type <- aType
			), 
--		-- creates a new model element because it may have repeated elements	
		aType : ATL!OclModelElement (
			name <- thisModule.getLeftInstance(amw.element.ref).name,
			model <- thisModule.resolveTemp(AMW!InModelTransf.allInstancesFrom('IN')->select ( e | true)->first(),'ametamodel')
		)		
 }	

--------------------------------the out pattern
rule ElementEqualOutpattern {
	from
		amw: AMW!OutElement 	
	to 
		outelement : ATL!SimpleOutPatternElement(
			varName <- amw.getVarName(),
		type <- aType
			--bindings <- amw.bindings
		),
		-- creates a new model element because it may have repeated elements	
		aType : ATL!OclModelElement (
			--name <- thisModule.getRightInstance(amw.element.ref).name--,
			--model <- thisModule.resolveTemp(AMW!OutModelTransf.allInstances('')->select ( e | true)->first(),'ametamodel')
		)		
}
------ checks the children of the bindings to call the correct lazy rule
--helper context AMW!Binding def : getBindingSource() : ATL!OclExpression =
--	if not self.source.oclIsUndefined() then
--		thisModule.getSimpleBinding(self.source)
--	else
--		if not self.sourceExp.oclIsUndefined() then
--			if self.sourceExp.oclIsTypeOf(AMW!OutputLink) then
--				thisModule.getNewSourceOutput(self.sourceExp)
--			else
--				if self.sourceExp.oclIsTypeOf(AMW!Concatenation) then
--					thisModule.getConcatExpression(self.sourceExp)
--				else
--					OclUndefined
--				endif
--			endif
--		else
--			OclUndefined
--		endif
--	endif;
--	
------- bindings
--
--rule Bindings {
--	from
--		amw : AMW!Binding 
--	to
--		atl : ATL!Binding (
--			--left side of formula, that will receive the value 
--			propertyName <- thisModule.getRightInstance(amw.target.element.ref).name,
--			--right side of formula, that has the value - issues
--			value <- amw.getBindingSource()
--		)
--}
--
-------- lazy rules that produce the source values for the bindings
--
--lazy rule getSimpleBinding {
--	from
--		amw : AMW!ReferredElement
--	to
--		value: ATL!NavigationOrAttributeCallExp (
--			name <- thisModule.getLeftInstance(amw.element.ref).name,			
--			source <- aSource
--		),
--		aSource : ATL!VariableExp(		
--			referredVariable <- thisModule.resolveTemp(amw.refImmediateComposite().refImmediateComposite().refImmediateComposite().input, 'element')
--		)
--}
--
--lazy rule getNewSourceOutput {
--	from
--		amw : AMW!OutputLink
--	to 
--		aSource : ATL!VariableExp(		
--			referredVariable <- amw.output
--		)		
--}
--
------ bindings that use concatenation
--rule getConcatExpression (amw : AMW!Concatenation) {
--	do {
--		thisModule.CreateConcat(amw, amw.source->collect(e | e.element.ref), false);
--	}	
--}
--
-----------------------------------------------------------
-------------called rules to concatenate elements
--
--rule CreateConcat(amw : AMW!Concatenation, attrRefs : Sequence(String), isReference : Boolean) {	-- : ATL!OperatorCallExp
--	to
--		operation : ATL!OperatorCallExp (
--			operationName <- '+'
--		)
--	do {
--		operation.source <- thisModule.CreateReferredConcatElement(amw, attrRefs->first());
--		if(attrRefs->size() = 2) {
--			operation.arguments <- thisModule.CreateReferredConcatElement(amw, attrRefs->last());
--		} else {
--			operation.arguments <- thisModule.CreateConcat(amw, attrRefs->subSequence(2, attrRefs->size()),isReference);
--		}
--		operation;
--	}
--}
--
--rule CreateReferredConcatElement(amw : AMW!Concatenation, attrRef : String) {	-- : ATL!NavigationOrAttributeCallExp
--	to
--		subelement : ATL!NavigationOrAttributeCallExp (
--			name <- MOF!EClassifier.getInstanceById('left', attrRef).name,			
--			source <- var
--		),	 						
--		var : ATL!VariableExp (
--			referredVariable <- thisModule.resolveTemp(amw.refImmediateComposite().refImmediateComposite().refImmediateComposite().input, 'element')
--		)
--	do {
--		subelement;
--	}
--}
--
--rule CreateConcatElement(amw : AMW!Concatenation, attrRef : String) {	-- : ATL!NavigationOrAttributeCallExp
--	to
--		subelement : ATL!NavigationOrAttributeCallExp (
--			name <- MOF!EClassifier.getInstanceById('left', attrRef).name,			
--			source <- var
--		),
--		var : ATL!VariableExp (
--			referredVariable <- thisModule.resolveTemp(amw.refImmediateComposite().refImmediateComposite().refImmediateComposite().input, 'element')
--		)
--	do {
--		subelement;
--	}
--}
