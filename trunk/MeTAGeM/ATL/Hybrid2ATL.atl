module Hybrid2ATL; -- Module Template
create OUT : ATL from IN : MM_Hybrid;

-- Create module header
rule Module {
	from 
		mm_hybrid : MM_Hybrid!Module
	to
		atl : ATL!Module (
			isRefining <- false,
			name <- mm_hybrid.name_module.debug('Module'),
		    inModels <- mm_hybrid.inMM,
			outModels <- mm_hybrid.outMM,
			elements <- mm_hybrid."rule",
			commentsBefore <- Set {'-- @atlcompiler atl2006'}
		)
}


rule inMM{
	from
		inMM_hybrid : MM_Hybrid!InMetaModel
	to
		inMM_ATL : ATL!OclModel(
			name <- inMM_hybrid.name_mm,
			metamodel <- ametamodelinMM
		),
		ametamodelinMM : ATL!OclModel (
			name <- inMM_hybrid.type_mm
		)
}


rule outMM{
	from
		outMM_hybrid : MM_Hybrid!OutMetaModel
	to
		outMM_ATL : ATL!OclModel(
			name <- outMM_hybrid.name_mm,
			metamodel <- ametamodeloutMM
		),
		ametamodeloutMM : ATL!OclModel (
			name <- outMM_hybrid.type_mm
		)
}


-- Create MatchedRule 
rule createRule2MatchedRule{
	from 
		mm_hybrid_rule : MM_Hybrid!Rule 
		(mm_hybrid_rule.isMain=true and mm_hybrid_rule.getSizeIP()>0)
	to
		atl : ATL!MatchedRule (
			name <- mm_hybrid_rule.name_rule.debug('MatchedRule'),
			isAbstract <- mm_hybrid_rule.isAbstract,
			isRefining <- false,
			isNoDefault <- false,
			superRule <- mm_hybrid_rule."extends",
			inPattern <- inPattern, 
			outPattern <- outPattern,
			commentsBefore <- Set {'-- Comments -> This is a MatchedRule: ' + mm_hybrid_rule.name_rule + ' -> ' + mm_hybrid_rule.getComment()}
		),
		inPattern : ATL!InPattern (
			elements <- mm_hybrid_rule."in".asSequence(),
			filter <- mm_hybrid_rule.getFilter()
		),
		outPattern : ATL!OutPattern(
			elements <- mm_hybrid_rule.out.asSequence()	
		),
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '}	
		)
}


-- Create LazyRule
rule createRule2LazyRule{ 
	from 
		mm_hybrid_rule : MM_Hybrid!Rule 
		(mm_hybrid_rule.isMain=false and not(mm_hybrid_rule.typeAttribute = #"unique") and mm_hybrid_rule.getSizeIP()>0)
	to
		atl : ATL!LazyMatchedRule (
			name <- mm_hybrid_rule.name_rule.debug('LazyRule'),
			isAbstract <- mm_hybrid_rule.isAbstract,
			isRefining <- false,
			isNoDefault <- false,
			isUnique <- false,
			inPattern <- inPattern,
			outPattern <- outPattern,
			commentsBefore <- Set {'-- Comments -> This is a LazyRule: ' + mm_hybrid_rule.name_rule + ' -> ' + mm_hybrid_rule.getComment()}
		),
		inPattern : ATL!InPattern (
			elements <- mm_hybrid_rule."in".asSequence(),
			filter <- mm_hybrid_rule.getFilter()
		),
		outPattern : ATL!OutPattern(
			elements <- mm_hybrid_rule.out.asSequence()	
		),
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '}	
		)
}


-- Create UniqueLazyRule
rule createRule2UniqueLazyRule{
	from 
		mm_hybrid_rule : MM_Hybrid!Rule 
		(mm_hybrid_rule.isMain=false and mm_hybrid_rule.typeAttribute = #"unique" and mm_hybrid_rule.getSizeIP()>0)
	to
		atl : ATL!LazyMatchedRule (
			name <- mm_hybrid_rule.name_rule.debug('Unique LazyRule'),
			isAbstract <- mm_hybrid_rule.isAbstract,
			isRefining <- false,
			isNoDefault <- false,
			isUnique <- true,
			inPattern <- inPattern,
			outPattern <- outPattern,
			commentsBefore <- Set {'-- Comments -> This is a LazyRule: ' + mm_hybrid_rule.name_rule + ' -> ' + mm_hybrid_rule.getComment()}
		),
		inPattern : ATL!InPattern (
			elements <- mm_hybrid_rule."in".asSequence(),
			filter <- mm_hybrid_rule.getFilter()
		),
		outPattern : ATL!OutPattern(
			elements <- mm_hybrid_rule.out.asSequence()	
		),
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '}	
		)
}


-- Create CalledRule [0..1] - [0..N] 
rule createRule2CalledRule{
	from 
		mm_hybrid_rule : MM_Hybrid!Rule (mm_hybrid_rule.getSizeIP()=0)
	to
		atl : ATL!CalledRule (
			name <- mm_hybrid_rule.name_rule.debug('CalledRule'),
			outPattern <- outPattern,
			actionBlock <- anAction,
			commentsBefore <- Set {'-- Comments -> This is a CalledRule: ' + mm_hybrid_rule.name_rule + ' -> ' + mm_hybrid_rule.getComment()}
		),
		outPattern : ATL!OutPattern(
			elements <- mm_hybrid_rule.out.asSequence()	
		),
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '}	
		)
}


--InputPattern (from part)
rule InPatternElement {
	from 
		inPattern : MM_Hybrid!SourceElementRule (inPattern.refImmediateComposite().oclIsTypeOf(MM_Hybrid!Rule))
	to
		atl : ATL!SimpleInPatternElement (
			varName <- inPattern.name_element.toLower()+'_in',
			type <- aType
		),
		aType : ATL!OclModelElement(
			name <- inPattern.name_element,
			model <- thisModule.resolveTemp(inPattern.metamodel,'ametamodelinMM')
		)
}


--OutputPattern (to part)
rule OutPatternElement { 
	from
		outPattern : MM_Hybrid!TargetElementRule (outPattern.refImmediateComposite().oclIsTypeOf(MM_Hybrid!Rule))
	to
		atl : ATL!SimpleOutPatternElement (
			varName <- outPattern.name_element.toLower()+'_out',
			type <- aType,
			bindings <- outPattern.included
		),
		aType : ATL!OclModelElement(
			name <- outPattern.name_element,
			model <- thisModule.resolveTemp(outPattern.metamodel,'ametamodeloutMM') 
		)
}


-- Helper -> To call the correct lazy rule to define the Binding
helper context MM_Hybrid!ElementIncluded def : getBindingSource() : ATL!OclExpression =
		if self.typeAttribute = #"concatenation" then
			thisModule.CreateConcatBinding(self, self.right.sourceElement.asSequence()->collect(i | i.name_element))
		else
			if (self.right."rule".asSequence().first().oclIsUndefined() and 
				self.right.operation.asSequence().first().oclIsUndefined() and
				self.right.sourceElement.asSequence().first().oclIsUndefined() and
				self.right.reference.oclIsUndefined()) then
					thisModule.getConcreteBinding(self)
			else
				if (not self.right.reference.oclIsUndefined()) then
					if self.right.reference.oclIsTypeOf(MM_Hybrid!SourceElementRule) then
						thisModule.getComplexBinding(self)
					else
						thisModule.getSimpleBinding(self)
					endif
				else
					thisModule.getComplexBinding(self)
			endif
		endif
	endif;


-- Helper -> Define the source binding (Element, Rule, Helper or Reference)
helper context MM_Hybrid!ElementIncluded def : getValueBinding () : ATL!OclExpression =  
	--rule undefined, operation undefined, srcElement undefined, reference defined	
	if (self.right."rule".asSequence().first().oclIsUndefined() and 
		self.right.operation.asSequence().first().oclIsUndefined() and
		self.right.sourceElement.asSequence().first().oclIsUndefined() and
		not self.right.reference.oclIsUndefined()) then
			OclUndefined
	else --reference undefined
		--rule undefined
		if self.right."rule".asSequence().first().oclIsUndefined() then
			--rule undefined and operation undefined
			if self.right.operation.asSequence().first().oclIsUndefined() then
				self.right.sourceElement.asSequence().first().name_element  
			--rule undefined and operation defined 
			else
				--rule undefined, operation defined and srcElement undefined
				if self.right.sourceElement.asSequence().first().oclIsUndefined() then
					self.right.operation.asSequence().first().name_operation
				-- rule undefined, operation defined and srcElement defined 
				else 
					self.right.sourceElement.asSequence().first().name_element + '.' + self.right.operation.asSequence().first().name_operation 
				endif
			endif
		--rule defined (operation undefined by validation)		
		else
			--rule defined and srcElement undefined
			if self.right.sourceElement.asSequence().first().oclIsUndefined() then
				self.right."rule".asSequence().first().name_rule
			--rule defined and srcElement defined
			else  
				self.right.sourceElement.asSequence().first().name_element + '.' + self.right."rule".asSequence().first().name_rule 
			endif
		endif
	endif;


-- Helper -> Return the variable used on source binding
helper context MM_Hybrid!ElementIncluded def : getReferredVariable () : ATL!OclExpression = --String =
	if self.refImmediateComposite().refImmediateComposite()."in".asSequence().first().oclIsUndefined()  then
		OclUndefined --'???' 
	else
		if self.right.reference.oclIsUndefined() then
			self.refImmediateComposite().refImmediateComposite()."in".asSequence().first().name_element.toLower()+'_in'
		else
			if self.right.reference.oclIsTypeOf(MM_Hybrid!SourceElementRule) then
				self.right.reference.name_element.toLower()+'_in'
			else
				self.right.reference.name_element.toLower()+'_out'
			endif
		endif
	endif;


-- Bindigs -> Formulas (TargetElements <- SourceElements)
rule Bindings {
	from 
		elemInc : MM_Hybrid!ElementIncluded
	to
		atl : ATL!Binding (
			--Left side of formula, that will receive the value
			propertyName <- elemInc.left.targetElement.asSequence().first().name_element,
			--Right side of formula, that has the value - issues
			value <- elemInc.getBindingSource()
		)
}


lazy rule getConcreteBinding {
	from
		elemInc : MM_Hybrid!ElementIncluded
	to 
		source : ATL!VariableExp(
			referredVariable <- areferred	
		),
		areferred : ATL!VariableDeclaration(
			varName <- elemInc.right.concreteValue
		) 		
}


lazy rule getSimpleBinding {
	from
		elemInc : MM_Hybrid!ElementIncluded
	to 
		source : ATL!VariableExp(
			referredVariable <- areferred	
		),
		areferred : ATL!VariableDeclaration(
			varName <- elemInc.getReferredVariable() 
		) 		
}


lazy rule getComplexBinding {
	from
		elemInc : MM_Hybrid!ElementIncluded
	to
		value : ATL!NavigationOrAttributeCallExp(
			name <- elemInc.getValueBinding(),
			source <- asource
		),
		asource : ATL!VariableExp(
			referredVariable <- areferred	
		),
		areferred : ATL!VariableDeclaration(
			varName <- elemInc.getReferredVariable()
		) 
}


-- Called Rule -> Create concatenation on Bindings
rule CreateConcatBinding (elemInc : MM_Hybrid!ElementIncluded, attrRefs : Sequence(String)){
	to
		operation : ATL!OperatorCallExp (
			operationName <- '+'
		)
	do {
		operation.source <- thisModule.CreateReferredConcatElement(elemInc, attrRefs.first());
		if(attrRefs->size() = 2) {
			operation.arguments <- thisModule.CreateReferredConcatElement(elemInc, attrRefs->last());
		} else {
			operation.arguments <- thisModule.CreateConcatBinding(elemInc, attrRefs->subSequence(2, attrRefs->size()));
		}
		operation;
	}
		}
		

rule CreateReferredConcatElement(elemInc : MM_Hybrid!ElementIncluded, attrRef : String) {	-- : ATL!NavigationOrAttributeCallExp
	to
		subelement : ATL!NavigationOrAttributeCallExp (
			--name <- attrRef, --AQUI	elemInc.getValueBinding(),		
			source <- asource
		),	 						
		asource : ATL!VariableExp (
			referredVariable <- areferred	
		),
		areferred : ATL!VariableDeclaration(
			varName <- elemInc.getReferredVariable()
		)
	do {
		
		if(elemInc.right."rule".asSequence().first().oclIsUndefined() and 
		elemInc.right.operation.asSequence().first().oclIsUndefined()) {
			subelement.name <- attrRef;
		} else {
			if (not elemInc.right."rule".asSequence().first().oclIsUndefined()) {
				subelement.name <- attrRef + '.' + elemInc.right."rule".asSequence().first().name_rule;
			} else {
				if (not elemInc.right.operation.asSequence().first().oclIsUndefined()) {
					subelement.name <- attrRef + '.' + elemInc.right.operation.asSequence().first().name_operation;
				} else{
					OclUndefined;
				  }
			  }
		  }
		subelement;
	}
}


-- To call the context lazy rule or Undefined 
helper context MM_Hybrid!Operation def : getContext () : ATL!OclExpression =
	if self."context".oclIsUndefined() then
		OclUndefined
	else
		thisModule.getSimpleContext(self)
	endif;


lazy rule getSimpleContext {
	from
		oper : MM_Hybrid!Operation
	to
		acontext : ATL!OclContextDefinition (
			context_ <- acontextin
		),
		acontextin : ATL!OclModelElement (
			name <- oper."context".name_element,
			model <- amodelin	
		),
		amodelin : ATL!OclModel(
			name <- oper."context".metamodel.type_mm
		) 
}


-- To call the ReturnType lazy rule
helper context MM_Hybrid!Operation def : getReturnType () : ATL!OclExpression =
	if self.returnType.oclIsUndefined() then
		OclUndefined
	else
		if self.returnType.datatype = #"String" then
			thisModule.getReturnStringType(self)
		else 
			if self.returnType.datatype = #"Integer" then
				thisModule.getReturnIntegerType(self)
			else 
				if self.returnType.datatype = #"Boolean" then
					thisModule.getReturnBooleanType(self)
				else
					thisModule.getReturnElementType(self)
				endif
			endif
		endif
	endif;


lazy rule getReturnStringType {
	from
		oper : MM_Hybrid!Operation
	to
		returnType : ATL!StringType 
}


lazy rule getReturnIntegerType {
	from
		oper : MM_Hybrid!Operation
	to
		returnType : ATL!IntegerType 
}


lazy rule getReturnBooleanType {
	from
		oper : MM_Hybrid!Operation
	to
		returnType : ATL!BooleanType 
}


lazy rule getReturnElementType {
	from
		oper : MM_Hybrid!Operation
	to
		areturnType : ATL!OclModelElement (
			name <- oper.returnType.element.name_element,
			model <- amodel
		),
		amodel : ATL!OclModel (
			name <- oper.returnType.element.metamodel.type_mm				
		) 
}


-- Create Helper with ReturnType 
rule createOperation2Helper {
	from
		oper : MM_Hybrid!Operation 
	to
		atl : ATL!Helper (
			"module" <- oper.refImmediateComposite(),
			definition <- adefinition,
			commentsBefore <- Set {'-- Comments -> This is a Helper: ' + oper.name_operation},
			commentsAfter <- Set {'-- Body: ' + oper.body}
		),
		adefinition : ATL!OclFeatureDefinition (
			feature <- afeature,
			context_ <- oper.getContext()
		),
		afeature : ATL!Operation (
			name <- oper.name_operation,
			returnType <- oper.getReturnType()
		)
}


helper context MM_Hybrid!Rule def : getFilter () :  ATL!OclExpression = 
	if self."in".asSequence()->collect(i | i.guard)->flatten()->asSet().isEmpty() then 
		OclUndefined
	else
		thisModule.getFilterExp(self)
	endif;
	

lazy rule getFilterExp {
	from
		mm_hybrid_rule : MM_Hybrid!Rule
	to 
		filter : ATL!VariableExp(
			commentsAfter <- mm_hybrid_rule.getCommentFilter() 
	)
}


-- Helper -> Return the filter expression
helper context MM_Hybrid!Rule def : getCommentFilter () : String = 
	let sizeSequence : Integer = self."in".asSequence()->collect(i|i.guard.asSequence()->collect(j|j.value))->flatten().toString().size()  in
	let sizeInitial : Integer = 11 in
			
	self."in".asSequence()->collect(i|i.guard.asSequence()->collect(j|j.value))->flatten().toString().substring(sizeInitial, sizeSequence - 1)
	;


--Helper -> Return the number of inputPatterns 
helper context MM_Hybrid!Rule def : getSizeIP () : Integer = 
	self."in".size();


--Helper -> Return the comment of the rule 
helper context MM_Hybrid!Rule def : getComment () : String = 
	if self.comment.oclIsUndefined() then
		''
	else
		self.comment
	endif
	;