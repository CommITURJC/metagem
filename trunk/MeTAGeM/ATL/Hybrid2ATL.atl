module Hybrid2ATL; -- Module Template
create OUT : ATL from IN : MM_Hybrid;

rule Module {
	from 
		mm_hybrid : MM_Hybrid!Module
	to
		atl : ATL!Module (
			isRefining <- false,
			name <- mm_hybrid.name_module.debug('Modulo'),
		    inModels <- mm_hybrid.inMM,
			outModels <- mm_hybrid.outMM,
			elements <- mm_hybrid."rule",
			commentsBefore <- Set {'-- @atlcompiler atl2006'}
		)
}
  
rule inMM{
	from
		inMM_hybrid : MM_Hybrid!InMetaModel
	to
		inMM_ATL : ATL!OclModel(
			--name <- inMM_hybrid.name_mm,
			name <- inMM_hybrid.type_mm,
			metamodel <- ametamodel
		),
		ametamodel : ATL!OclModel (
			name <- inMM_hybrid.type_mm
		)
}

rule outMM{
	from
		outMM_hybrid : MM_Hybrid!OutMetaModel
	to
		outMM_ATL : ATL!OclModel(
			--name <- outMM_hybrid.name_mm,
			name <- outMM_hybrid.type_mm,
			metamodel <- ametamodel
		),
		ametamodel : ATL!OclModel (
			name <- outMM_hybrid.type_mm
		)
}

-- Create MatchedRule [1..1] - [1..N] 
rule createRule2MatchedRule{
	from 
		mm_hybrid_rule : MM_Hybrid!Rule 
		(mm_hybrid_rule.isMain=true and mm_hybrid_rule.getSizeIP()=1)
	to
		atl : ATL!MatchedRule (
			name <- mm_hybrid_rule.name_rule.debug('Name MacthedRule'),
			isAbstract <- mm_hybrid_rule.isAbstract,
			isRefining <- false,
			isDefault <- false,
			superRule <- mm_hybrid_rule."extends",
			inPattern <- mm_hybrid_rule."in".asSequence().first(),
			outPattern <- outPattern,
			commentsBefore <- Set {'-- Comments -> This is a MatchedRule: ' + mm_hybrid_rule.name_rule}
		),
--		inPatterns : distinct ATL!InPattern foreach (e in mm_hybrid_rule."in")(
--			elements <- mm_hybrid_rule."in".asSequence()--,
--			--filter <- ???
--			),
		outPattern : ATL!OutPattern(
			elements <- mm_hybrid_rule.out.asSequence()	
	)
}

-- Create LazyRule [1..1] - [1..N] 
rule createRule2LazyRule{
	from 
		mm_hybrid_rule : MM_Hybrid!Rule 
		(mm_hybrid_rule.isMain=false and mm_hybrid_rule.getSizeIP()=1)
	to
		atl : ATL!LazyMatchedRule (
			name <- mm_hybrid_rule.name_rule.debug('Name LazyRule'),
			isAbstract <- mm_hybrid_rule.isAbstract,
			isRefining <- false,
			isDefault <- false,
			inPattern <- mm_hybrid_rule."in".asSequence().first(),
			outPattern <- outPattern,
			commentsBefore <- Set {'-- Comments -> This is a LazyRule: ' + mm_hybrid_rule.name_rule}
		),
--		inPattern : ATL!InPattern(
--			elements <- mm_hybrid_rule."in".asSequence()--,
--			--filter <- ???
--			),
		outPattern : ATL!OutPattern(
			elements <- mm_hybrid_rule.out.asSequence()	
		)
}

-- Create CalledRule [0..1] - [0..N] 
rule createRule2CalledRule{
	from 
		mm_hybrid_rule : MM_Hybrid!Rule (mm_hybrid_rule.getSizeIP()=0)
	to
		atl : ATL!CalledRule (
			name <- mm_hybrid_rule.name_rule.debug('Name CalledRule'),
			outPattern <- outPattern,
			actionBlock <- anAction,
			commentsBefore <- Set {'-- Comments -> This is a CalledRule: ' + mm_hybrid_rule.name_rule}
		),
		outPattern : ATL!OutPattern(
			elements <- mm_hybrid_rule.out.asSequence()	
		),
		anAction : ATL!ActionBlock(
			commentsBefore <- Set {'-- ActionBlock: '}	
		)
}

rule InPatternElement {
	from 
		inPattern : MM_Hybrid!SourceElementRule (inPattern.refImmediateComposite().oclIsTypeOf(MM_Hybrid!Rule))
	to
		atl : ATL!InPattern (
			elements <- element 
		),
		element : ATL!SimpleInPatternElement (
			varName <- inPattern.name_element.toLower(),
			type <- aType
		),
		aType : ATL!OclModelElement(
			name <- inPattern.name_element,
			--model <- thisModule.resolveTemp(MM_Hybrid!InMetaModel.allInstances()->select(e|true)->first(),'ametamodel')
			model <- inPattern.metamodel
		),
		atl_element:ATL!OclModelElement(
			name <- inPattern.name_element	
		)
}

rule OutPatternElement { 
	from
		outPattern : MM_Hybrid!TargetElementRule (outPattern.refImmediateComposite().oclIsTypeOf(MM_Hybrid!Rule))
	to
		atl : ATL!SimpleOutPatternElement (
			varName <- outPattern.name_element.toLower(),
			type <- aType,
			bindings <- outPattern.included
		),
		aType : ATL!OclModelElement(
			name <- outPattern.name_element,
			--model <- thisModule.resolveTemp(MM_Hybrid!OutMetaModel,'ametamodel')
			model <- outPattern.metamodel
		),
		atl_element:ATL!OclModelElement(
			name <- outPattern.name_element	
		)
}

rule Bindings {
	from 
		elemInc : MM_Hybrid!ElementIncluded
	to
		atl : ATL!Binding (
			propertyName <- elemInc.left.targetElement.asSequence().first().name_element,
			value <- avalue
		),
		avalue : ATL!NavigationOrAttributeCallExp(
			name <- elemInc.getSourceBinding(),
			source <- asource
		),
		asource : ATL!VariableExp(
			referredVariable <- areferred	
		),
		areferred : ATL!VariableDeclaration(
			varName <- elemInc.getReferredVariable() --elemInc.refImmediateComposite().refImmediateComposite()."in".asSequence().first().name_element.toLower()
		) 
}

rule createOperation2Helper {
	from
		oper : MM_Hybrid!Operation
	to
		atl : ATL!Helper (
			"module" <- oper.refImmediateComposite(),
			definition <- adefinition,
			commentsBefore <- Set {'-- Comments -> This is a Helper: ' + oper.name_operation},
			commentsAfter <- Set {'-- Body: ' + oper.body}
		),
		adefinition : ATL!OclFeatureDefinition (
			feature <- afeature--,
			--context_ <- acontext
		),
		afeature : ATL!Operation (
			name <- oper.name_operation--,
			--returnType <- oper.returnValue
		)--,
--		acontext : ATL!OclContextDefinition (
--			context_ <- acontextint
--		),
--		acontextint : ATL!OclModel (
--			name <- oper."context".name_element,
--			model <- amodel
--		),
--		amodel : ATL!OclModel (
--			name <- oper."context".metamodel 	
--		)


}

--rule returnValue {
--	from
--		val : MM_Hybrid!Return
--	to
--		rt : ATL!Operation (
--			returnType <- val.datatype	
--		)
--}

helper context MM_Hybrid!Rule def : getSizeIP () : Integer = 
	self."in".size();

--helper context MM_Hybrid!Rule def : getSizeOP() : Integer = 
--	self.out.size();


helper context MM_Hybrid!ElementIncluded def : getSourceBinding () : String =
	if self.right."rule".asSequence().first().oclIsUndefined() then
		self.right.sourceElement.asSequence().first().name_element
	else
		if self.right.sourceElement.asSequence().first().oclIsUndefined() then
			self.right."rule".asSequence().first().name_rule
		else 
			self.right.sourceElement.asSequence().first().name_element + '.' + self.right."rule".asSequence().first().name_rule
		endif
	endif;


helper context MM_Hybrid!ElementIncluded def : getReferredVariable () : String =
	if self.refImmediateComposite().refImmediateComposite()."in".asSequence().first().oclIsUndefined()  then
		'???'
	else
		self.refImmediateComposite().refImmediateComposite()."in".asSequence().first().name_element.toLower()
	endif;
		