module Hybrid2ATL; -- Module Template
create OUT : ATL from IN : MM_Hybrid;

rule Module {
	from 
		mm_hybrid : MM_Hybrid!Module
	to
		atl : ATL!Module (
			isRefining <- false,
			name <- mm_hybrid.name_module.debug('Modulo'),
		    inModels <- mm_hybrid.inMM,
			outModels <- mm_hybrid.outMM,
			elements <- mm_hybrid."rule",
			commentsBefore <- Set {'-- @atlcompiler atl2006'}
		)
}
  
rule inMM{
	from
		inMM_hybrid : MM_Hybrid!InMetaModel
	to
		inMM_ATL : ATL!OclModel(
			--name <- inMM_hybrid.name_mm,
			name <- inMM_hybrid.type_mm,
			metamodel <- ametamodel
		),
		ametamodel : ATL!OclModel (
			name <- inMM_hybrid.type_mm
		)
}

rule outMM{
	from
		outMM_hybrid : MM_Hybrid!OutMetaModel
	to
		outMM_ATL : ATL!OclModel(
			--name <- outMM_hybrid.name_mm,
			name <- outMM_hybrid.type_mm,
			metamodel <- ametamodel
		),
		ametamodel : ATL!OclModel (
			name <- outMM_hybrid.type_mm
		)
}

-- Create MatchedRule [1..1] - [1..N] 
rule createRule2MatchedRule{
	from 
		mm_hybrid_rule : MM_Hybrid!Rule 
		(mm_hybrid_rule.isMain=true and mm_hybrid_rule.getSizeIP()=1)
	to
		atl : ATL!MatchedRule (
			name <- mm_hybrid_rule.name_rule,
			isAbstract <- mm_hybrid_rule.isAbstract,
			isRefining <- false,
			isDefault <- false,
			superRule <- mm_hybrid_rule."extends",
			inPattern <- mm_hybrid_rule."in".asSequence().first(),
			outPattern <- outPattern
		),
--		inPattern : ATL!InPattern(
--			elements <- mm_hybrid_rule."in".asSequence(),
--			filter <- ???
--			),
		outPattern : ATL!OutPattern(
			elements <- mm_hybrid_rule.out.asSequence()	
		)
}

-- Create LazyRule [1..1] - [1..N] 
rule createRule2LazyRule{
	from 
		mm_hybrid_rule : MM_Hybrid!Rule 
		(mm_hybrid_rule.isMain=false and mm_hybrid_rule.getSizeIP()=1)
	to
		atl : ATL!LazyMatchedRule (
			name <- mm_hybrid_rule.name_rule,
			isAbstract <- mm_hybrid_rule.isAbstract,
			isRefining <- false,
			isDefault <- false,
			inPattern <- mm_hybrid_rule."in".asSequence().first(),
			outPattern <- outPattern
		),
--		inPattern : ATL!InPattern(
--			elements <- mm_hybrid_rule."in".asSequence(),
--			filter <- ???
--			),
		outPattern : ATL!OutPattern(
			elements <- mm_hybrid_rule.out.asSequence()	
		)
}

-- Create CalledRule [0..1] - [0..N] 
rule createRule2CalledRule{
	from 
		mm_hybrid_rule : MM_Hybrid!Rule (mm_hybrid_rule.getSizeIP()=0)
	to
		atl : ATL!CalledRule (
			name <- mm_hybrid_rule.name_rule,
			outPattern <- outPattern
		),
		outPattern : ATL!OutPattern(
			elements <- mm_hybrid_rule.out.asSequence()	
		)
}

rule InPatternElement {
	from 
		inPattern : MM_Hybrid!SourceElementRule  	
	to
		atl : ATL!InPattern (
			elements <- element 
		),
		element : ATL!SimpleInPatternElement (
			varName <- inPattern.name_element.toLower(),
			type <- aType
		),
		aType : ATL!OclModelElement(
			name <- inPattern.name_element,
			--model <- thisModule.resolveTemp(MM_Hybrid!InMetaModel.allInstances()->select(e|true)->first(),'ametamodel')
			model <- inPattern.metamodel
		),
		atl_element:ATL!OclModelElement(
			name <- inPattern.name_element	
		)
}

rule OutPatternElement { 
	from
		outPattern : MM_Hybrid!TargetElementRule
	to
		atl : ATL!SimpleOutPatternElement (
			varName <- outPattern.name_element.toLower(),
			type <- aType,
			bindings <- outPattern.included
		),
		aType : ATL!OclModelElement(
			name <- outPattern.name_element,
			--model <- thisModule.resolveTemp(MM_Hybrid!OutMetaModel,'ametamodel')
			model <- outPattern.metamodel
		),
		atl_element:ATL!OclModelElement(
			name <- outPattern.name_element	
		)
}

rule Bindings {
	from 
		elemInc : MM_Hybrid!ElementIncluded
	to
		atl : ATL!Binding (
			propertyName <- elemInc.left.targetElement.asSequence().first().name_element,
			value <- avalue
		),
		avalue : ATL!NavigationOrAttributeCallExp(
			name <- elemInc.right.sourceElement.asSequence().first().name_element, 
			source <- asource
		),
		asource : ATL!VariableExp(
			referredVariable <- areferred	
		),
		areferred : ATL!VariableDeclaration(
			--varName <- thisModule.resolveTemp(MM_Hybrid!SourceElementRule.allInstances()->select(e|true)->first(),'element').varName
			varName <- elemInc.target."rule"."in".asSequence().first().name_element.toLower()
		) 
}  

helper context MM_Hybrid!Rule def : getSizeIP () : Integer = 
	self."in".size();

--helper context MM_Hybrid!Rule def : getSizeOP() : Integer = 
--	self.out.size();