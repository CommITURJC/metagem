@gmf(foo="bar")
@namespace(uri="http:///MM_Hybrid.ecore", prefix="mm_hybrid")
package mm_hybrid;

enum TypeAtribute {
  copy = 1;
  concatenation = 2;
}

@gmf.diagram(foo="bar")
class Module {
  !unique !ordered attr String[1] name_module;
  !ordered val Rule[+] rule;
  transient attr EEList<String>[+] inMM;
  transient attr EEList<String>[+] outMM;
}

@gmf.node(label="name_rule", label.icon="false", border.color="204,153,0", color="253,229,141")
class Rule {
  !unique !ordered attr String[1] name_rule;
  !unique !ordered attr boolean[1] isAbstract;
  !unique !ordered attr boolean[1] isMain;
  !ordered val SourceElementRule[1] in;
  !ordered val TargetElementRule[+] out;
}

abstract class Element {
  !unique !ordered attr String[1] name_element;
}

@gmf.node(label="name_element", label.icon="false", border.color="31,73,125", color="218,238,243")
class SourceElementRule extends Element {
  !ordered val Condition[1] condition;
}

@gmf.node(label="name_element", label.icon="false", border.color="51,153,102", color="204,255,204")
class TargetElementRule extends Element {
}

class ElementIncluded {
  !ordered val Element[+] sourceElement;
  !ordered val Element[+] targetElement;
}

class Condition {
}

