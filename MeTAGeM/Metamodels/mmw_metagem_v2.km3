package mmw_metagem { 

--la extension para metagem
	enumeration MyAttributeType {
	 	literal copy; --es solo una copia textual del atribute
		literal concatenation ; --concatenación de mas de un atributo -- necesariamente tengo que usar una Nto1
		literal "unique"; --Permite definir que una regla se ejecuta una sola vez 
		literal varius; 
		--attribute function : String
	} 
	
	enumeration MyTypeElem{
		literal MyEclassifier;
		literal MyEattribute;
		literal MyEreference;	
		}
		
	enumeration MyTypeRelation{
		literal IsMain;
		literal IsSecondary;
		literal IsAbstract;
	}
	
	class ModelRoot extends WModel{
		-- @subsets wovenModel
		reference inputModel [1-*] container : InModelTransf;
	
		-- @subsets wovenModel
		reference outputModel [1-*] container : OutModelTransf;
	
		-- @subsets ownedElement
		reference relations [1-*] container : Relations;
		--reference onetoone [1-*] container : OneToOne;
	
	}
		
	-- @welementRefType TransformationElementRef	
	abstract class ModelTransf extends WModelRef {
	}
	 
	-- @welementRefType TransformationElementRef
	class InModelTransf extends ModelTransf{
	}

	-- @welementRefType TransformationElementRef
	class OutModelTransf extends ModelTransf{
	}
	
		-- @wmodelRefType ModelTransf
	class TransformationElementRef extends WElementRef {
	}	

	abstract class Relations extends WLink{
		attribute typeAttri : MyAttributeType;
		attribute typeE: MyTypeElem; --indica si la relacion es entre un classifier, attribute o reference
		attribute typeRelation : MyTypeRelation;
		
		-- @subsets child
		reference isInvoked[0-*]: InElement oppositeOf invoked;
		
	   -- @subsets child
		reference extend [0-1]: Relations oppositeOf isExtend;
		reference isExtend [*]: Relations oppositeOf extend;		
	}
	
	--abstract class ElementTransf extends WLinkEnd{
	--}
	
	class InElement extends WLinkEnd{
		attribute guardCondition : String;
		-- @subsets child
		reference invoked[0-1]: Relations oppositeOf isInvoked;
	}	
	
	class OutElement extends WLinkEnd{
		-- @subsets child
		reference onetoOne [*]  ordered container: OneToOne oppositeOf outElement;
		-- @subsets child
		reference manytoOne [*] ordered container: ManyToOne oppositeOf outElement;
		-- @subsets child
		reference zerotoOne [*]  ordered container: ZeroToOne oppositeOf outElement;
		
	}
	
	class OneToOne extends Relations{
		 -- @subsets end
       reference source container : InElement;
        -- @subsets end
       reference target container : OutElement;
       -- @subsets end
       reference outElement: OutElement oppositeOf onetoOne;
	     
     }
     
    class OneToZero extends Relations{
	 -- @subsets end
     reference source container : InElement;
    }
    
    class ZeroToOne extends Relations{
	 -- @subsets end
     reference target container : OutElement;
     -- @subsets end
     reference outElement: OutElement oppositeOf zerotoOne;
    }

	class OneToMany extends Relations{
		 -- @subsets end
       reference source container : InElement;
        -- @subsets end
        reference target [1-*] container : OutElement;
        
     }

	class ManyToOne extends Relations{
		 -- @subsets end
       reference source [1-*] container : InElement;
        -- @subsets end
        reference target container : OutElement;
        -- @subsets end
        reference outElement: OutElement oppositeOf manytoOne;
		 
     }
     
     class ManyToMany extends Relations{
		 -- @subsets end
       reference source [1-*] container : InElement;
        -- @subsets end
        reference target [1-*] container : OutElement;
		 
     }

}


