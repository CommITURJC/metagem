--@atlcompiler atl2006
module MeTAGeM2Hybrid; -- Module Template
create OUT : MM_Hybrid from IN : AMW, left : MOF, right : MOF;

helper def : countRules : Integer = 1;

rule Module {
	from 
		amw : AMW!ModelRoot
	to
		hybrid : MM_Hybrid!Module (
			name_module <- amw.name.debug('nombremodulo '),
		    inMM <- amw.inputModel,
			outMM <- amw.outputModel,
			"rule" <- amw.relations			
		)
}

rule inModel{
	from
		in_MM_amw: AMW!InModelTransf
	to
		in_MM_hybrid: MM_Hybrid!InMetaModel(
			name_mm <-	in_MM_amw.name+'_model',
			type_mm <- in_MM_amw.name
		)
}

rule outModel{
	from
		out_MM_amw: AMW!OutModelTransf
	to
		out_MM_hybrid: MM_Hybrid!OutMetaModel(
			name_mm <-	out_MM_amw.name+'_model',
			type_mm <-  out_MM_amw.name
		)
}

rule InElement2SourceElementRuleWithoutCondition{
	from
		inElem: AMW!InElement (inElem.guardCondition.oclIsUndefined())
	to
		sourceElem: MM_Hybrid!SourceElementRule(
			name_element <- inElem.name			
		)
}

rule InElement2SourceElementRuleWithCondition{
	from
		inElem: AMW!InElement (not inElem.guardCondition.oclIsUndefined())
	to
		sourceElem: MM_Hybrid!SourceElementRule(
			name_element <- inElem.name,
			condition <- sourceCondition
		),
		sourceCondition: MM_Hybrid!Condition(
			value <- inElem.guardCondition	
		)
}

rule OutElement2TargetElementRule{
	from
		outElem: AMW!OutElement
	to
		targetElem: MM_Hybrid!TargetElementRule(
			name_element <- outElem.name,
			included <- outElem.relations
		)
}


rule OneToOne2rule extends Relations2Rule{
	from
		relation: AMW!OneToOne
	to
		r_hybrid: MM_Hybrid!Rule(
			"in" <- relation.source,
			out <- relation.target
		)
	do {
		thisModule.countRules <- thisModule.countRules + 1;
	}
}

rule OneToZero2rule extends Relations2Rule{
	from
		relation: AMW!OneToZero
	to
		r_hybrid: MM_Hybrid!Rule(
			"in" <- relation.source
		)
	do {
		thisModule.countRules <- thisModule.countRules + 1;
	}
}

rule ZeroToOne2rule extends Relations2Rule{
	from
		relation: AMW!ZeroToOne
	to
		r_hybrid: MM_Hybrid!Rule(
			out <- relation.target
		)
	do {
		thisModule.countRules <- thisModule.countRules + 1;
	}
}

rule OneToMany2rule extends Relations2Rule{
	from
		relation: AMW!OneToMany
	to
		r_hybrid: MM_Hybrid!Rule(
			"in" <- relation.source,
			out <- relation.target
		)
	do {
		thisModule.countRules <- thisModule.countRules + 1;
	}
}
rule ManyToOne2rule extends Relations2Rule{
	from
		relation: AMW!ManyToOne
	to
		r_hybrid: MM_Hybrid!Rule(
			"in" <- relation.source,
			out <- relation.target
		)
	do {
		thisModule.countRules <- thisModule.countRules + 1;
	}
}
rule ManyToMany2rule extends Relations2Rule{
	from
		relation: AMW!ManyToMany
	to
		r_hybrid: MM_Hybrid!Rule(
			"in" <- relation.source,
			out <- relation.target
		)
	do {
		thisModule.countRules <- thisModule.countRules + 1;
	}
}

abstract rule Relations2Rule{
	from
		relation:AMW!Relations(relation.outElement.asSequence().size()=0)
	to
		r_hybrid:MM_Hybrid!Rule(
			name_rule <- relation.getRuleName().debug('nombre rule '),
			isAbstract <- relation.isAbstract,
			isMain <- relation.isMain,
			typeAttribute <- relation.typeAttri,
			typeElement <- relation.typeE
		)
}


rule OneToOne2ElementIncluded{
	from
		relation_o2o:AMW!OneToOne(relation_o2o.outElement.asSequence().size()>0)
	to
		elementIncluded:MM_Hybrid!ElementIncluded(
			sourceElement <- relation_o2o.source,
			targetElement <- relation_o2o.target
		)
}


rule OneToMany2ElementIncluded{
	from
		relation_o2m:AMW!OneToMany(relation_o2m.outElement.asSequence().size()>0)
	to
		elementIncluded:MM_Hybrid!ElementIncluded(
			sourceElement <- relation_o2m.source,
			targetElement <- relation_o2m.target
		)
}

rule ZeroToOne2ElementIncluded{
	from
		relation_z2o:AMW!ZeroToOne(relation_z2o.outElement.asSequence().size()>0)
	to
		elementIncluded:MM_Hybrid!ElementIncluded(
			targetElement <- relation_z2o.target
		)
}

rule ManyToOne2ElementIncluded{
	from
		relation_m2o:AMW!ManyToOne(relation_m2o.outElement.asSequence().size()>0)
	to
		elementIncluded:MM_Hybrid!ElementIncluded(
			sourceElement <- relation_m2o.source,
			targetElement <- relation_m2o.target
		)
}

rule ManyToMany2ElementIncluded{
	from
		relation_m2m:AMW!ManyToMany(relation_m2m.outElement.asSequence().size()>0)
	to
		elementIncluded:MM_Hybrid!ElementIncluded(
			sourceElement <- relation_m2m.source,
			targetElement <- relation_m2m.target
		)
}

helper context AMW!Relations def : getRuleName () : String = 
	if self.name.oclIsUndefined() then
		self.getInOutPatternName()
	else
		if self.name = '' then
			self.getInOutPatternName()
		else
			self.name
		endif
	endif;

helper context AMW!Relations def : getInOutPatternName () : String =
	if not self.source.asSequence()->first().oclIsUndefined() and not self.target.asSequence()->first().oclIsUndefined() then
		self.source.asSequence()->first().name + '_2_'+ self.target.asSequence()->first().name
	else
		'R' + thisModule.countRules.toString()
	endif;
