--@atlcompiler atl2006
module MeTAGeM2Hybrid; -- Module Template
create OUT : MM_Hybrid from IN : AMW, left : MOF, right : MOF;


rule Module {
	from 
		amw : AMW!ModelRoot
	to
		hybrid : MM_Hybrid!Module (
			name_module <- amw.name.debug('nombremodulo '),
		    inMM <- amw.inputModel,
			outMM <- amw.outputModel,	
			"rule" <- amw.relations			
		)
}

rule inModel{
	from
		in_MM_amw: AMW!InModelTransf
	to
		in_MM_hybrid: MM_Hybrid!InMetaModel(
			name_mm <-	in_MM_amw.name
		)
}

rule outModel{
	from
		out_MM_amw: AMW!OutModelTransf
	to
		out_MM_hybrid: MM_Hybrid!OutMetaModel(
			name_mm <-	out_MM_amw.name
		)
}

rule InElement2SourceElementRule{
	from
		inElem: AMW!InElement
	to
		sourceElem: MM_Hybrid!SourceElementRule(
			name_element <- inElem.name
		)
}

rule OutElement2TargetElementRule{
	from
		outElem: AMW!OutElement
	to
		targetElem: MM_Hybrid!TargetElementRule(
			name_element <- outElem.name
		)
}


rule OneToOne2rule extends Relations2Rule{
	from
		relation: AMW!OneToOne
	to
		r_hybrid: MM_Hybrid!Rule(
			"in" <- relation.source,
			out <- relation.target
		)
}

rule OneToZero2rule extends Relations2Rule{
	from
		relation: AMW!OneToZero
	to
		r_hybrid: MM_Hybrid!Rule(
			"in" <- relation.source
		)
}

rule ZeroToOne2rule extends Relations2Rule{
	from
		relation: AMW!ZeroToOne
	to
		r_hybrid: MM_Hybrid!Rule(
			out <- relation.target
		)
}

rule OneToMany2rule extends Relations2Rule{
	from
		relation: AMW!OneToMany
	to
		r_hybrid: MM_Hybrid!Rule(
			"in" <- relation.source,
			out <- relation.target
		)
}
rule ManyToOne2rule extends Relations2Rule{
	from
		relation: AMW!ManyToOne
	to
		r_hybrid: MM_Hybrid!Rule(
			"in" <- relation.source,
			out <- relation.target
		)
}
rule ManyToMany2rule extends Relations2Rule{
	from
		relation: AMW!ManyToMany
	to
		r_hybrid: MM_Hybrid!Rule(
			"in" <- relation.source,
			out <- relation.target
		)
}


abstract rule Relations2Rule{
	from
		relation:AMW!Relations
	to
		r_hybrid:MM_Hybrid!Rule(
			name_rule <- relation.name.debug('nombre rule '),
			isAbstract <- false,
			isMain <- relation.isMain,
			typeAttribute <- relation.typeAttri,
			typeElement <- relation.typeE
		)
}
