<?xml version="1.0" encoding="ISO-8859-1"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rubytl="http://org.eclipse.kybele.metagem.rubytl">
  <rubytl:Transformation name="ModuleRubyTL">
    <sourceMetamodels name="InMetamodel"/>
    <targetMetamodels name="OutMetamodel"/>
    <rules xsi:type="rubytl:TopRule" name="RuleTest1" comment="This is a Comment...">
      <from name="src1_in" classname="Src1" metamodel="/0/@sourceMetamodels.0"/>
      <to name="trg1_out" classname="Trg1" metamodel="/0/@targetMetamodels.0"/>
      <to name="trg1b_out" classname="Trg1b" metamodel="/0/@targetMetamodels.0"/>
      <filter expression="GuardAux"/>
      <mapping>
        <bindings>
          <target xsi:type="rubytl:ExpGet" property="ElcIncTrg1">
            <source variable="/6"/>
          </target>
          <source xsi:type="rubytl:ExpGet" property="ElcIncSrc1">
            <source variable="/11"/>
          </source>
        </bindings>
        <bindings>
          <target xsi:type="rubytl:ExpGet" property="ElcIncTrg1b">
            <source variable="/7"/>
          </target>
          <source xsi:type="rubytl:ExpGet" property="ElcIncSrc1b">
            <source variable="/12"/>
          </source>
        </bindings>
      </mapping>
    </rules>
    <rules xsi:type="rubytl:NormalRule" name="RuleTest2" comment="Another comment...">
      <from name="src2_in" classname="Src2" metamodel="/0/@sourceMetamodels.0"/>
      <to name="trg2_out" classname="Trg2" metamodel="/0/@targetMetamodels.0"/>
      <mapping>
        <bindings>
          <target xsi:type="rubytl:ExpGet" property="ElcIncTrg2">
            <source variable="/8"/>
          </target>
          <source xsi:type="rubytl:ExpGet" property="ElcIncSrc2">
            <source variable="/13"/>
          </source>
        </bindings>
      </mapping>
    </rules>
    <rules xsi:type="rubytl:TopRule" name="RuleTest3" comment="Multi IN &#xA;# Se realiza el producto cartesiano de todos los elementos de entrada&#xA;# Se cambia el to MM::Class -> to many(MM::Class).&#xA;# Se utiliza la propiedad values para imitar un nuevo binding: (trg_aux.values = InMM:SrcX.all_objects.map do |srcx|).&#xA;# Para cada par de elementos se crea un nuevo elemento de destino: (trgx = OutMM::TrgX.new).">
      <from name="src3_in" classname="Src3" metamodel="/0/@sourceMetamodels.0"/>
      <to name="trg3_out" classname="Trg3" metamodel="/0/@targetMetamodels.0"/>
      <to name="trg4_out" classname="Trg4" metamodel="/0/@targetMetamodels.0"/>
      <filter expression="# Inputs -> 'InMetamodel::Src3.all_objects.map', 'InMetamodel::Src4.all_objects.map'"/>
      <mapping>
        <bindings>
          <target xsi:type="rubytl:ExpGet" property="ElcIncTrg3">
            <source variable="/9"/>
          </target>
          <source xsi:type="rubytl:ExpGet" property="ElcIncSrc3">
            <source variable="/14"/>
          </source>
        </bindings>
        <bindings>
          <target xsi:type="rubytl:ExpGet" property="ElcIncTrg4">
            <source variable="/10"/>
          </target>
          <source xsi:type="rubytl:ExpGet" property="ElcIncSrc4">
            <source variable="/15"/>
          </source>
        </bindings>
      </mapping>
    </rules>
    <decorators name="OP1" body="Cuerpo del decorator1 - ReturnType: Boolean" context="/2"/>
    <decorators name="OP2" body="Cuerpo del decorator2 - ReturnType: Integer" context="/4"/>
  </rubytl:Transformation>
  <rubytl:FromElement name="src4_in" classname="Src4" metamodel="/0/@sourceMetamodels.0"/>
  <rubytl:FromElement name="src1_in" classname="Src1" metamodel="/3"/>
  <rubytl:Metamodel name="InMetamodel"/>
  <rubytl:FromElement name="elcincsrc2_in" classname="ElcIncSrc2" metamodel="/5"/>
  <rubytl:Metamodel name="InMetamodel"/>
  <rubytl:ToElement name="trg1_out"/>
  <rubytl:ToElement name="trg1b_out"/>
  <rubytl:ToElement name="trg2_out"/>
  <rubytl:ToElement name="trg3_out"/>
  <rubytl:ToElement name="trg4_out"/>
  <rubytl:FromElement name="src1_in"/>
  <rubytl:FromElement name="src1_in"/>
  <rubytl:FromElement name="src2_in"/>
  <rubytl:FromElement name="src3_in"/>
  <rubytl:FromElement name="src4_in"/>
</xmi:XMI>
